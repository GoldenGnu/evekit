/*
 * EveKit Model API Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package enterprises.orbital.evekit.client.api;

import enterprises.orbital.evekit.client.ApiCallback;
import enterprises.orbital.evekit.client.ApiClient;
import enterprises.orbital.evekit.client.ApiException;
import enterprises.orbital.evekit.client.ApiResponse;
import enterprises.orbital.evekit.client.Configuration;
import enterprises.orbital.evekit.client.Pair;
import enterprises.orbital.evekit.client.ProgressRequestBody;
import enterprises.orbital.evekit.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import enterprises.orbital.evekit.client.model.CalendarEventAttendee;
import enterprises.orbital.evekit.client.model.CharacterContactNotification;
import enterprises.orbital.evekit.client.model.CharacterFleet;
import enterprises.orbital.evekit.client.model.CharacterLocation;
import enterprises.orbital.evekit.client.model.CharacterMailMessage;
import enterprises.orbital.evekit.client.model.CharacterMedal;
import enterprises.orbital.evekit.client.model.CharacterMedalGraphic;
import enterprises.orbital.evekit.client.model.CharacterNotification;
import enterprises.orbital.evekit.client.model.CharacterOnline;
import enterprises.orbital.evekit.client.model.CharacterRole;
import enterprises.orbital.evekit.client.model.CharacterSheet;
import enterprises.orbital.evekit.client.model.CharacterSheetAttributes;
import enterprises.orbital.evekit.client.model.CharacterSheetClone;
import enterprises.orbital.evekit.client.model.CharacterSheetJump;
import enterprises.orbital.evekit.client.model.CharacterSheetSkillPoints;
import enterprises.orbital.evekit.client.model.CharacterShip;
import enterprises.orbital.evekit.client.model.CharacterSkill;
import enterprises.orbital.evekit.client.model.CharacterTitle;
import enterprises.orbital.evekit.client.model.ChatChannel;
import enterprises.orbital.evekit.client.model.ChatChannelMember;
import enterprises.orbital.evekit.client.model.Fitting;
import enterprises.orbital.evekit.client.model.FittingItem;
import enterprises.orbital.evekit.client.model.FleetInfo;
import enterprises.orbital.evekit.client.model.FleetMember;
import enterprises.orbital.evekit.client.model.FleetSquad;
import enterprises.orbital.evekit.client.model.FleetWing;
import enterprises.orbital.evekit.client.model.Implant;
import enterprises.orbital.evekit.client.model.JumpClone;
import enterprises.orbital.evekit.client.model.JumpCloneImplant;
import enterprises.orbital.evekit.client.model.LoyaltyPoints;
import enterprises.orbital.evekit.client.model.MailLabel;
import enterprises.orbital.evekit.client.model.MailingList;
import enterprises.orbital.evekit.client.model.MiningLedger;
import enterprises.orbital.evekit.client.model.Opportunity;
import enterprises.orbital.evekit.client.model.PlanetaryColony;
import enterprises.orbital.evekit.client.model.PlanetaryLink;
import enterprises.orbital.evekit.client.model.PlanetaryPin;
import enterprises.orbital.evekit.client.model.PlanetaryRoute;
import enterprises.orbital.evekit.client.model.ResearchAgent;
import enterprises.orbital.evekit.client.model.ServiceError;
import enterprises.orbital.evekit.client.model.SkillInQueue;
import enterprises.orbital.evekit.client.model.UpcomingCalendarEvent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CharacterApi {
    private ApiClient apiClient;

    public CharacterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CharacterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getCalendarEventAttendees
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param eventID Calendar event ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param characterID Attending character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param response Attendee response selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCalendarEventAttendeesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String eventID, String characterID, String response, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/calendar_event_attendees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (eventID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("eventID", eventID));
        }

        if (characterID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("characterID", characterID));
        }

        if (response != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("response", response));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCalendarEventAttendeesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String eventID, String characterID, String response, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getCalendarEventAttendees(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getCalendarEventAttendees(Async)");
        }
        

        com.squareup.okhttp.Call call = getCalendarEventAttendeesCall(accessKey, accessCred, at, contid, maxresults, reverse, eventID, characterID, response, callback);
        return call;

    }

    /**
     * Get calendar event attendees
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param eventID Calendar event ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param characterID Attending character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param response Attendee response selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CalendarEventAttendee&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CalendarEventAttendee> getCalendarEventAttendees(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String eventID, String characterID, String response) throws ApiException {
        ApiResponse<List<CalendarEventAttendee>> resp = getCalendarEventAttendeesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, eventID, characterID, response);
        return resp.getData();
    }

    /**
     * Get calendar event attendees
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param eventID Calendar event ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param characterID Attending character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param response Attendee response selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CalendarEventAttendee&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CalendarEventAttendee>> getCalendarEventAttendeesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String eventID, String characterID, String response) throws ApiException {
        com.squareup.okhttp.Call call = getCalendarEventAttendeesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, eventID, characterID, response, null);
        Type localVarReturnType = new TypeToken<List<CalendarEventAttendee>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get calendar event attendees (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param eventID Calendar event ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param characterID Attending character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param response Attendee response selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCalendarEventAttendeesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String eventID, String characterID, String response, final ApiCallback<List<CalendarEventAttendee>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCalendarEventAttendeesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, eventID, characterID, response, callback);
        Type localVarReturnType = new TypeToken<List<CalendarEventAttendee>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelMembers
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param channelID Channel ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param category Member category selector (optional, default to &quot;{ any: true }&quot;)
     * @param accessorID Member accessor ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param accessorType Member accessor type selector (optional, default to &quot;{ any: true }&quot;)
     * @param untilWhen Member restriction \&quot;until when\&quot; date selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Member restriction reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelMembersCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String category, String accessorID, String accessorType, String untilWhen, String reason, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/channel_member";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (channelID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("channelID", channelID));
        }

        if (category != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("category", category));
        }

        if (accessorID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessorID", accessorID));
        }

        if (accessorType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessorType", accessorType));
        }

        if (untilWhen != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("untilWhen", untilWhen));
        }

        if (reason != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reason", reason));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelMembersValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String category, String accessorID, String accessorType, String untilWhen, String reason, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getChannelMembers(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getChannelMembers(Async)");
        }
        

        com.squareup.okhttp.Call call = getChannelMembersCall(accessKey, accessCred, at, contid, maxresults, reverse, channelID, category, accessorID, accessorType, untilWhen, reason, callback);
        return call;

    }

    /**
     * Get chat channel members
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param channelID Channel ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param category Member category selector (optional, default to &quot;{ any: true }&quot;)
     * @param accessorID Member accessor ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param accessorType Member accessor type selector (optional, default to &quot;{ any: true }&quot;)
     * @param untilWhen Member restriction \&quot;until when\&quot; date selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Member restriction reason selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;ChatChannelMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ChatChannelMember> getChannelMembers(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String category, String accessorID, String accessorType, String untilWhen, String reason) throws ApiException {
        ApiResponse<List<ChatChannelMember>> resp = getChannelMembersWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, channelID, category, accessorID, accessorType, untilWhen, reason);
        return resp.getData();
    }

    /**
     * Get chat channel members
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param channelID Channel ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param category Member category selector (optional, default to &quot;{ any: true }&quot;)
     * @param accessorID Member accessor ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param accessorType Member accessor type selector (optional, default to &quot;{ any: true }&quot;)
     * @param untilWhen Member restriction \&quot;until when\&quot; date selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Member restriction reason selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;ChatChannelMember&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ChatChannelMember>> getChannelMembersWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String category, String accessorID, String accessorType, String untilWhen, String reason) throws ApiException {
        com.squareup.okhttp.Call call = getChannelMembersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, channelID, category, accessorID, accessorType, untilWhen, reason, null);
        Type localVarReturnType = new TypeToken<List<ChatChannelMember>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get chat channel members (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param channelID Channel ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param category Member category selector (optional, default to &quot;{ any: true }&quot;)
     * @param accessorID Member accessor ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param accessorType Member accessor type selector (optional, default to &quot;{ any: true }&quot;)
     * @param untilWhen Member restriction \&quot;until when\&quot; date selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Member restriction reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelMembersAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String category, String accessorID, String accessorType, String untilWhen, String reason, final ApiCallback<List<ChatChannelMember>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getChannelMembersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, channelID, category, accessorID, accessorType, untilWhen, reason, callback);
        Type localVarReturnType = new TypeToken<List<ChatChannelMember>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannels
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param channelID Channel ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Channel owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param displayName Channel display name selector (optional, default to &quot;{ any: true }&quot;)
     * @param comparisonKey Channel comparison key selector (optional, default to &quot;{ any: true }&quot;)
     * @param hasPassword Channel has password selector (optional, default to &quot;{ any: true }&quot;)
     * @param motd Channel Message of the Day selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String ownerID, String displayName, String comparisonKey, String hasPassword, String motd, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/channel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (channelID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("channelID", channelID));
        }

        if (ownerID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ownerID", ownerID));
        }

        if (displayName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("displayName", displayName));
        }

        if (comparisonKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("comparisonKey", comparisonKey));
        }

        if (hasPassword != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("hasPassword", hasPassword));
        }

        if (motd != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("motd", motd));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String ownerID, String displayName, String comparisonKey, String hasPassword, String motd, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getChannels(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getChannels(Async)");
        }
        

        com.squareup.okhttp.Call call = getChannelsCall(accessKey, accessCred, at, contid, maxresults, reverse, channelID, ownerID, displayName, comparisonKey, hasPassword, motd, callback);
        return call;

    }

    /**
     * Get character chat channels
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param channelID Channel ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Channel owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param displayName Channel display name selector (optional, default to &quot;{ any: true }&quot;)
     * @param comparisonKey Channel comparison key selector (optional, default to &quot;{ any: true }&quot;)
     * @param hasPassword Channel has password selector (optional, default to &quot;{ any: true }&quot;)
     * @param motd Channel Message of the Day selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;ChatChannel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ChatChannel> getChannels(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String ownerID, String displayName, String comparisonKey, String hasPassword, String motd) throws ApiException {
        ApiResponse<List<ChatChannel>> resp = getChannelsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, channelID, ownerID, displayName, comparisonKey, hasPassword, motd);
        return resp.getData();
    }

    /**
     * Get character chat channels
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param channelID Channel ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Channel owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param displayName Channel display name selector (optional, default to &quot;{ any: true }&quot;)
     * @param comparisonKey Channel comparison key selector (optional, default to &quot;{ any: true }&quot;)
     * @param hasPassword Channel has password selector (optional, default to &quot;{ any: true }&quot;)
     * @param motd Channel Message of the Day selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;ChatChannel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ChatChannel>> getChannelsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String ownerID, String displayName, String comparisonKey, String hasPassword, String motd) throws ApiException {
        com.squareup.okhttp.Call call = getChannelsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, channelID, ownerID, displayName, comparisonKey, hasPassword, motd, null);
        Type localVarReturnType = new TypeToken<List<ChatChannel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character chat channels (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param channelID Channel ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Channel owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param displayName Channel display name selector (optional, default to &quot;{ any: true }&quot;)
     * @param comparisonKey Channel comparison key selector (optional, default to &quot;{ any: true }&quot;)
     * @param hasPassword Channel has password selector (optional, default to &quot;{ any: true }&quot;)
     * @param motd Channel Message of the Day selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String channelID, String ownerID, String displayName, String comparisonKey, String hasPassword, String motd, final ApiCallback<List<ChatChannel>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getChannelsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, channelID, ownerID, displayName, comparisonKey, hasPassword, motd, callback);
        Type localVarReturnType = new TypeToken<List<ChatChannel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCharacterFleet
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param role Fleet role selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCharacterFleetCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String role, String squadID, String wingID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/char_fleet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (fleetID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fleetID", fleetID));
        }

        if (role != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        }

        if (squadID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("squadID", squadID));
        }

        if (wingID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("wingID", wingID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCharacterFleetValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String role, String squadID, String wingID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getCharacterFleet(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getCharacterFleet(Async)");
        }
        

        com.squareup.okhttp.Call call = getCharacterFleetCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, role, squadID, wingID, callback);
        return call;

    }

    /**
     * Get character fleets
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param role Fleet role selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterFleet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterFleet> getCharacterFleet(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String role, String squadID, String wingID) throws ApiException {
        ApiResponse<List<CharacterFleet>> resp = getCharacterFleetWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, role, squadID, wingID);
        return resp.getData();
    }

    /**
     * Get character fleets
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param role Fleet role selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterFleet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterFleet>> getCharacterFleetWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String role, String squadID, String wingID) throws ApiException {
        com.squareup.okhttp.Call call = getCharacterFleetValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, role, squadID, wingID, null);
        Type localVarReturnType = new TypeToken<List<CharacterFleet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character fleets (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param role Fleet role selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCharacterFleetAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String role, String squadID, String wingID, final ApiCallback<List<CharacterFleet>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCharacterFleetValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, role, squadID, wingID, callback);
        Type localVarReturnType = new TypeToken<List<CharacterFleet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCharacterSheetAttributes
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param intelligence Intelligence selector (optional, default to &quot;{ any: true }&quot;)
     * @param memory Memory selector (optional, default to &quot;{ any: true }&quot;)
     * @param charisma Charisma selector (optional, default to &quot;{ any: true }&quot;)
     * @param perception Perception selector (optional, default to &quot;{ any: true }&quot;)
     * @param willpower Willpower selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastRemapDate Last remap date selector (optional, default to &quot;{ any: true }&quot;)
     * @param accruedRemapCooldownDate Accrued remap cooldown date selector (optional, default to &quot;{ any: true }&quot;)
     * @param bonusRemaps Bonus remaps selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCharacterSheetAttributesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String intelligence, String memory, String charisma, String perception, String willpower, String lastRemapDate, String accruedRemapCooldownDate, String bonusRemaps, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/sheet_attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (intelligence != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("intelligence", intelligence));
        }

        if (memory != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("memory", memory));
        }

        if (charisma != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("charisma", charisma));
        }

        if (perception != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("perception", perception));
        }

        if (willpower != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("willpower", willpower));
        }

        if (lastRemapDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("lastRemapDate", lastRemapDate));
        }

        if (accruedRemapCooldownDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accruedRemapCooldownDate", accruedRemapCooldownDate));
        }

        if (bonusRemaps != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bonusRemaps", bonusRemaps));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCharacterSheetAttributesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String intelligence, String memory, String charisma, String perception, String willpower, String lastRemapDate, String accruedRemapCooldownDate, String bonusRemaps, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getCharacterSheetAttributes(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getCharacterSheetAttributes(Async)");
        }
        

        com.squareup.okhttp.Call call = getCharacterSheetAttributesCall(accessKey, accessCred, at, contid, maxresults, reverse, intelligence, memory, charisma, perception, willpower, lastRemapDate, accruedRemapCooldownDate, bonusRemaps, callback);
        return call;

    }

    /**
     * Get character sheet attributes
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param intelligence Intelligence selector (optional, default to &quot;{ any: true }&quot;)
     * @param memory Memory selector (optional, default to &quot;{ any: true }&quot;)
     * @param charisma Charisma selector (optional, default to &quot;{ any: true }&quot;)
     * @param perception Perception selector (optional, default to &quot;{ any: true }&quot;)
     * @param willpower Willpower selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastRemapDate Last remap date selector (optional, default to &quot;{ any: true }&quot;)
     * @param accruedRemapCooldownDate Accrued remap cooldown date selector (optional, default to &quot;{ any: true }&quot;)
     * @param bonusRemaps Bonus remaps selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterSheetAttributes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterSheetAttributes> getCharacterSheetAttributes(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String intelligence, String memory, String charisma, String perception, String willpower, String lastRemapDate, String accruedRemapCooldownDate, String bonusRemaps) throws ApiException {
        ApiResponse<List<CharacterSheetAttributes>> resp = getCharacterSheetAttributesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, intelligence, memory, charisma, perception, willpower, lastRemapDate, accruedRemapCooldownDate, bonusRemaps);
        return resp.getData();
    }

    /**
     * Get character sheet attributes
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param intelligence Intelligence selector (optional, default to &quot;{ any: true }&quot;)
     * @param memory Memory selector (optional, default to &quot;{ any: true }&quot;)
     * @param charisma Charisma selector (optional, default to &quot;{ any: true }&quot;)
     * @param perception Perception selector (optional, default to &quot;{ any: true }&quot;)
     * @param willpower Willpower selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastRemapDate Last remap date selector (optional, default to &quot;{ any: true }&quot;)
     * @param accruedRemapCooldownDate Accrued remap cooldown date selector (optional, default to &quot;{ any: true }&quot;)
     * @param bonusRemaps Bonus remaps selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterSheetAttributes&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterSheetAttributes>> getCharacterSheetAttributesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String intelligence, String memory, String charisma, String perception, String willpower, String lastRemapDate, String accruedRemapCooldownDate, String bonusRemaps) throws ApiException {
        com.squareup.okhttp.Call call = getCharacterSheetAttributesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, intelligence, memory, charisma, perception, willpower, lastRemapDate, accruedRemapCooldownDate, bonusRemaps, null);
        Type localVarReturnType = new TypeToken<List<CharacterSheetAttributes>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character sheet attributes (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param intelligence Intelligence selector (optional, default to &quot;{ any: true }&quot;)
     * @param memory Memory selector (optional, default to &quot;{ any: true }&quot;)
     * @param charisma Charisma selector (optional, default to &quot;{ any: true }&quot;)
     * @param perception Perception selector (optional, default to &quot;{ any: true }&quot;)
     * @param willpower Willpower selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastRemapDate Last remap date selector (optional, default to &quot;{ any: true }&quot;)
     * @param accruedRemapCooldownDate Accrued remap cooldown date selector (optional, default to &quot;{ any: true }&quot;)
     * @param bonusRemaps Bonus remaps selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCharacterSheetAttributesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String intelligence, String memory, String charisma, String perception, String willpower, String lastRemapDate, String accruedRemapCooldownDate, String bonusRemaps, final ApiCallback<List<CharacterSheetAttributes>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCharacterSheetAttributesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, intelligence, memory, charisma, perception, willpower, lastRemapDate, accruedRemapCooldownDate, bonusRemaps, callback);
        Type localVarReturnType = new TypeToken<List<CharacterSheetAttributes>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCharacterSheets
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param characterID Character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Name selector (optional, default to &quot;{ any: true }&quot;)
     * @param corporationID Corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param raceID Race selector (optional, default to &quot;{ any: true }&quot;)
     * @param doB Date of birth selector (optional, default to &quot;{ any: true }&quot;)
     * @param bloodlineID Bloodline ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ancestryID Ancestry ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param gender Gender selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Description selector (optional, default to &quot;{ any: true }&quot;)
     * @param securityStatus Security status selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCharacterSheetsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String characterID, String name, String corporationID, String raceID, String doB, String bloodlineID, String ancestryID, String gender, String allianceID, String factionID, String description, String securityStatus, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/sheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (characterID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("characterID", characterID));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        if (corporationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("corporationID", corporationID));
        }

        if (raceID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("raceID", raceID));
        }

        if (doB != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("doB", doB));
        }

        if (bloodlineID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bloodlineID", bloodlineID));
        }

        if (ancestryID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ancestryID", ancestryID));
        }

        if (gender != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("gender", gender));
        }

        if (allianceID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("allianceID", allianceID));
        }

        if (factionID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("factionID", factionID));
        }

        if (description != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        }

        if (securityStatus != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("securityStatus", securityStatus));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCharacterSheetsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String characterID, String name, String corporationID, String raceID, String doB, String bloodlineID, String ancestryID, String gender, String allianceID, String factionID, String description, String securityStatus, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getCharacterSheets(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getCharacterSheets(Async)");
        }
        

        com.squareup.okhttp.Call call = getCharacterSheetsCall(accessKey, accessCred, at, contid, maxresults, reverse, characterID, name, corporationID, raceID, doB, bloodlineID, ancestryID, gender, allianceID, factionID, description, securityStatus, callback);
        return call;

    }

    /**
     * Get character sheet
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param characterID Character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Name selector (optional, default to &quot;{ any: true }&quot;)
     * @param corporationID Corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param raceID Race selector (optional, default to &quot;{ any: true }&quot;)
     * @param doB Date of birth selector (optional, default to &quot;{ any: true }&quot;)
     * @param bloodlineID Bloodline ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ancestryID Ancestry ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param gender Gender selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Description selector (optional, default to &quot;{ any: true }&quot;)
     * @param securityStatus Security status selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterSheet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterSheet> getCharacterSheets(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String characterID, String name, String corporationID, String raceID, String doB, String bloodlineID, String ancestryID, String gender, String allianceID, String factionID, String description, String securityStatus) throws ApiException {
        ApiResponse<List<CharacterSheet>> resp = getCharacterSheetsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, characterID, name, corporationID, raceID, doB, bloodlineID, ancestryID, gender, allianceID, factionID, description, securityStatus);
        return resp.getData();
    }

    /**
     * Get character sheet
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param characterID Character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Name selector (optional, default to &quot;{ any: true }&quot;)
     * @param corporationID Corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param raceID Race selector (optional, default to &quot;{ any: true }&quot;)
     * @param doB Date of birth selector (optional, default to &quot;{ any: true }&quot;)
     * @param bloodlineID Bloodline ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ancestryID Ancestry ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param gender Gender selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Description selector (optional, default to &quot;{ any: true }&quot;)
     * @param securityStatus Security status selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterSheet&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterSheet>> getCharacterSheetsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String characterID, String name, String corporationID, String raceID, String doB, String bloodlineID, String ancestryID, String gender, String allianceID, String factionID, String description, String securityStatus) throws ApiException {
        com.squareup.okhttp.Call call = getCharacterSheetsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, characterID, name, corporationID, raceID, doB, bloodlineID, ancestryID, gender, allianceID, factionID, description, securityStatus, null);
        Type localVarReturnType = new TypeToken<List<CharacterSheet>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character sheet (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param characterID Character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Name selector (optional, default to &quot;{ any: true }&quot;)
     * @param corporationID Corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param raceID Race selector (optional, default to &quot;{ any: true }&quot;)
     * @param doB Date of birth selector (optional, default to &quot;{ any: true }&quot;)
     * @param bloodlineID Bloodline ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ancestryID Ancestry ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param gender Gender selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Description selector (optional, default to &quot;{ any: true }&quot;)
     * @param securityStatus Security status selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCharacterSheetsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String characterID, String name, String corporationID, String raceID, String doB, String bloodlineID, String ancestryID, String gender, String allianceID, String factionID, String description, String securityStatus, final ApiCallback<List<CharacterSheet>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCharacterSheetsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, characterID, name, corporationID, raceID, doB, bloodlineID, ancestryID, gender, allianceID, factionID, description, securityStatus, callback);
        Type localVarReturnType = new TypeToken<List<CharacterSheet>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCloneJumpTimers
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param cloneJumpDate Clone jump date selector (optional, default to &quot;{ any: true }&quot;)
     * @param homeStationID Home station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param homeStationType Home station type selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastStationChangeDate Last station change date selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCloneJumpTimersCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String cloneJumpDate, String homeStationID, String homeStationType, String lastStationChangeDate, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/clone_jump_timer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (cloneJumpDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("cloneJumpDate", cloneJumpDate));
        }

        if (homeStationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("homeStationID", homeStationID));
        }

        if (homeStationType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("homeStationType", homeStationType));
        }

        if (lastStationChangeDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("lastStationChangeDate", lastStationChangeDate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCloneJumpTimersValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String cloneJumpDate, String homeStationID, String homeStationType, String lastStationChangeDate, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getCloneJumpTimers(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getCloneJumpTimers(Async)");
        }
        

        com.squareup.okhttp.Call call = getCloneJumpTimersCall(accessKey, accessCred, at, contid, maxresults, reverse, cloneJumpDate, homeStationID, homeStationType, lastStationChangeDate, callback);
        return call;

    }

    /**
     * Get character clone jump timers
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param cloneJumpDate Clone jump date selector (optional, default to &quot;{ any: true }&quot;)
     * @param homeStationID Home station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param homeStationType Home station type selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastStationChangeDate Last station change date selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterSheetClone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterSheetClone> getCloneJumpTimers(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String cloneJumpDate, String homeStationID, String homeStationType, String lastStationChangeDate) throws ApiException {
        ApiResponse<List<CharacterSheetClone>> resp = getCloneJumpTimersWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, cloneJumpDate, homeStationID, homeStationType, lastStationChangeDate);
        return resp.getData();
    }

    /**
     * Get character clone jump timers
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param cloneJumpDate Clone jump date selector (optional, default to &quot;{ any: true }&quot;)
     * @param homeStationID Home station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param homeStationType Home station type selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastStationChangeDate Last station change date selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterSheetClone&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterSheetClone>> getCloneJumpTimersWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String cloneJumpDate, String homeStationID, String homeStationType, String lastStationChangeDate) throws ApiException {
        com.squareup.okhttp.Call call = getCloneJumpTimersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, cloneJumpDate, homeStationID, homeStationType, lastStationChangeDate, null);
        Type localVarReturnType = new TypeToken<List<CharacterSheetClone>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character clone jump timers (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param cloneJumpDate Clone jump date selector (optional, default to &quot;{ any: true }&quot;)
     * @param homeStationID Home station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param homeStationType Home station type selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastStationChangeDate Last station change date selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCloneJumpTimersAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String cloneJumpDate, String homeStationID, String homeStationType, String lastStationChangeDate, final ApiCallback<List<CharacterSheetClone>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getCloneJumpTimersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, cloneJumpDate, homeStationID, homeStationType, lastStationChangeDate, callback);
        Type localVarReturnType = new TypeToken<List<CharacterSheetClone>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContactNotifications
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param notificationID Notification ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Contact notification sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Contact notification send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param standingLevel Contact notification standing level selector (optional, default to &quot;{ any: true }&quot;)
     * @param messageData Contact notification message data selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactNotificationsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String senderID, String sentDate, String standingLevel, String messageData, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/contact_notification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (notificationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("notificationID", notificationID));
        }

        if (senderID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("senderID", senderID));
        }

        if (sentDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sentDate", sentDate));
        }

        if (standingLevel != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("standingLevel", standingLevel));
        }

        if (messageData != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("messageData", messageData));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactNotificationsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String senderID, String sentDate, String standingLevel, String messageData, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getContactNotifications(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getContactNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = getContactNotificationsCall(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, senderID, sentDate, standingLevel, messageData, callback);
        return call;

    }

    /**
     * Get character contact notifications
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param notificationID Notification ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Contact notification sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Contact notification send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param standingLevel Contact notification standing level selector (optional, default to &quot;{ any: true }&quot;)
     * @param messageData Contact notification message data selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterContactNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterContactNotification> getContactNotifications(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String senderID, String sentDate, String standingLevel, String messageData) throws ApiException {
        ApiResponse<List<CharacterContactNotification>> resp = getContactNotificationsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, senderID, sentDate, standingLevel, messageData);
        return resp.getData();
    }

    /**
     * Get character contact notifications
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param notificationID Notification ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Contact notification sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Contact notification send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param standingLevel Contact notification standing level selector (optional, default to &quot;{ any: true }&quot;)
     * @param messageData Contact notification message data selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterContactNotification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterContactNotification>> getContactNotificationsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String senderID, String sentDate, String standingLevel, String messageData) throws ApiException {
        com.squareup.okhttp.Call call = getContactNotificationsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, senderID, sentDate, standingLevel, messageData, null);
        Type localVarReturnType = new TypeToken<List<CharacterContactNotification>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character contact notifications (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param notificationID Notification ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Contact notification sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Contact notification send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param standingLevel Contact notification standing level selector (optional, default to &quot;{ any: true }&quot;)
     * @param messageData Contact notification message data selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactNotificationsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String senderID, String sentDate, String standingLevel, String messageData, final ApiCallback<List<CharacterContactNotification>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getContactNotificationsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, senderID, sentDate, standingLevel, messageData, callback);
        Type localVarReturnType = new TypeToken<List<CharacterContactNotification>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFittingItems
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fittingID Ship fitting item fitting ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Ship fitting item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param flag Ship fitting item flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Ship fitting item quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFittingItemsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String typeID, String flag, String quantity, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/fitting_items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (fittingID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fittingID", fittingID));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (flag != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("flag", flag));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFittingItemsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String typeID, String flag, String quantity, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getFittingItems(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getFittingItems(Async)");
        }
        

        com.squareup.okhttp.Call call = getFittingItemsCall(accessKey, accessCred, at, contid, maxresults, reverse, fittingID, typeID, flag, quantity, callback);
        return call;

    }

    /**
     * Get character ship fitting items
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fittingID Ship fitting item fitting ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Ship fitting item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param flag Ship fitting item flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Ship fitting item quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;FittingItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FittingItem> getFittingItems(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String typeID, String flag, String quantity) throws ApiException {
        ApiResponse<List<FittingItem>> resp = getFittingItemsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, fittingID, typeID, flag, quantity);
        return resp.getData();
    }

    /**
     * Get character ship fitting items
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fittingID Ship fitting item fitting ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Ship fitting item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param flag Ship fitting item flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Ship fitting item quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;FittingItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FittingItem>> getFittingItemsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String typeID, String flag, String quantity) throws ApiException {
        com.squareup.okhttp.Call call = getFittingItemsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fittingID, typeID, flag, quantity, null);
        Type localVarReturnType = new TypeToken<List<FittingItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character ship fitting items (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fittingID Ship fitting item fitting ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Ship fitting item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param flag Ship fitting item flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Ship fitting item quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFittingItemsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String typeID, String flag, String quantity, final ApiCallback<List<FittingItem>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getFittingItemsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fittingID, typeID, flag, quantity, callback);
        Type localVarReturnType = new TypeToken<List<FittingItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFittings
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fittingID Ship fitting ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Ship fitting name selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Ship fitting description selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Ship fitting ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFittingsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String name, String description, String shipTypeID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/fittings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (fittingID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fittingID", fittingID));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        }

        if (shipTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("shipTypeID", shipTypeID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFittingsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String name, String description, String shipTypeID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getFittings(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getFittings(Async)");
        }
        

        com.squareup.okhttp.Call call = getFittingsCall(accessKey, accessCred, at, contid, maxresults, reverse, fittingID, name, description, shipTypeID, callback);
        return call;

    }

    /**
     * Get character ship fittings
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fittingID Ship fitting ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Ship fitting name selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Ship fitting description selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Ship fitting ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Fitting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Fitting> getFittings(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String name, String description, String shipTypeID) throws ApiException {
        ApiResponse<List<Fitting>> resp = getFittingsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, fittingID, name, description, shipTypeID);
        return resp.getData();
    }

    /**
     * Get character ship fittings
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fittingID Ship fitting ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Ship fitting name selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Ship fitting description selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Ship fitting ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Fitting&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Fitting>> getFittingsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String name, String description, String shipTypeID) throws ApiException {
        com.squareup.okhttp.Call call = getFittingsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fittingID, name, description, shipTypeID, null);
        Type localVarReturnType = new TypeToken<List<Fitting>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character ship fittings (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fittingID Ship fitting ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Ship fitting name selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Ship fitting description selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Ship fitting ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFittingsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fittingID, String name, String description, String shipTypeID, final ApiCallback<List<Fitting>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getFittingsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fittingID, name, description, shipTypeID, callback);
        Type localVarReturnType = new TypeToken<List<Fitting>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFleetInfo
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isFreeMove Fleet &#39;is free move&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param isRegistered Fleet &#39;is registered&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param isVoiceEnabled Fleet &#39;is voice enabled&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param motd Fleet message of the day selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFleetInfoCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String isFreeMove, String isRegistered, String isVoiceEnabled, String motd, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/fleet_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (fleetID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fleetID", fleetID));
        }

        if (isFreeMove != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("isFreeMove", isFreeMove));
        }

        if (isRegistered != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("isRegistered", isRegistered));
        }

        if (isVoiceEnabled != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("isVoiceEnabled", isVoiceEnabled));
        }

        if (motd != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("motd", motd));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFleetInfoValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String isFreeMove, String isRegistered, String isVoiceEnabled, String motd, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getFleetInfo(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getFleetInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = getFleetInfoCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, isFreeMove, isRegistered, isVoiceEnabled, motd, callback);
        return call;

    }

    /**
     * Get fleet info
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isFreeMove Fleet &#39;is free move&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param isRegistered Fleet &#39;is registered&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param isVoiceEnabled Fleet &#39;is voice enabled&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param motd Fleet message of the day selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;FleetInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FleetInfo> getFleetInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String isFreeMove, String isRegistered, String isVoiceEnabled, String motd) throws ApiException {
        ApiResponse<List<FleetInfo>> resp = getFleetInfoWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, isFreeMove, isRegistered, isVoiceEnabled, motd);
        return resp.getData();
    }

    /**
     * Get fleet info
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isFreeMove Fleet &#39;is free move&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param isRegistered Fleet &#39;is registered&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param isVoiceEnabled Fleet &#39;is voice enabled&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param motd Fleet message of the day selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;FleetInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FleetInfo>> getFleetInfoWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String isFreeMove, String isRegistered, String isVoiceEnabled, String motd) throws ApiException {
        com.squareup.okhttp.Call call = getFleetInfoValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, isFreeMove, isRegistered, isVoiceEnabled, motd, null);
        Type localVarReturnType = new TypeToken<List<FleetInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get fleet info (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isFreeMove Fleet &#39;is free move&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param isRegistered Fleet &#39;is registered&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param isVoiceEnabled Fleet &#39;is voice enabled&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param motd Fleet message of the day selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFleetInfoAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String isFreeMove, String isRegistered, String isVoiceEnabled, String motd, final ApiCallback<List<FleetInfo>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getFleetInfoValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, isFreeMove, isRegistered, isVoiceEnabled, motd, callback);
        Type localVarReturnType = new TypeToken<List<FleetInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFleetMembers
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet member fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param characterID Fleet member character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param joinTime Fleet member join time selector (optional, default to &quot;{ any: true }&quot;)
     * @param role Fleet member role selector (optional, default to &quot;{ any: true }&quot;)
     * @param roleName Fleet member role name selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Fleet member ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Fleet member solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet member squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Fleet member station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param takesFleetWarp Fleet member &#39;takes fleet warp&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet member wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFleetMembersCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String characterID, String joinTime, String role, String roleName, String shipTypeID, String solarSystemID, String squadID, String stationID, String takesFleetWarp, String wingID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/fleet_members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (fleetID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fleetID", fleetID));
        }

        if (characterID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("characterID", characterID));
        }

        if (joinTime != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("joinTime", joinTime));
        }

        if (role != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("role", role));
        }

        if (roleName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("roleName", roleName));
        }

        if (shipTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("shipTypeID", shipTypeID));
        }

        if (solarSystemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("solarSystemID", solarSystemID));
        }

        if (squadID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("squadID", squadID));
        }

        if (stationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("stationID", stationID));
        }

        if (takesFleetWarp != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("takesFleetWarp", takesFleetWarp));
        }

        if (wingID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("wingID", wingID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFleetMembersValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String characterID, String joinTime, String role, String roleName, String shipTypeID, String solarSystemID, String squadID, String stationID, String takesFleetWarp, String wingID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getFleetMembers(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getFleetMembers(Async)");
        }
        

        com.squareup.okhttp.Call call = getFleetMembersCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, characterID, joinTime, role, roleName, shipTypeID, solarSystemID, squadID, stationID, takesFleetWarp, wingID, callback);
        return call;

    }

    /**
     * Get fleet membership info
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet member fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param characterID Fleet member character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param joinTime Fleet member join time selector (optional, default to &quot;{ any: true }&quot;)
     * @param role Fleet member role selector (optional, default to &quot;{ any: true }&quot;)
     * @param roleName Fleet member role name selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Fleet member ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Fleet member solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet member squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Fleet member station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param takesFleetWarp Fleet member &#39;takes fleet warp&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet member wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;FleetMember&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FleetMember> getFleetMembers(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String characterID, String joinTime, String role, String roleName, String shipTypeID, String solarSystemID, String squadID, String stationID, String takesFleetWarp, String wingID) throws ApiException {
        ApiResponse<List<FleetMember>> resp = getFleetMembersWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, characterID, joinTime, role, roleName, shipTypeID, solarSystemID, squadID, stationID, takesFleetWarp, wingID);
        return resp.getData();
    }

    /**
     * Get fleet membership info
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet member fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param characterID Fleet member character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param joinTime Fleet member join time selector (optional, default to &quot;{ any: true }&quot;)
     * @param role Fleet member role selector (optional, default to &quot;{ any: true }&quot;)
     * @param roleName Fleet member role name selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Fleet member ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Fleet member solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet member squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Fleet member station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param takesFleetWarp Fleet member &#39;takes fleet warp&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet member wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;FleetMember&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FleetMember>> getFleetMembersWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String characterID, String joinTime, String role, String roleName, String shipTypeID, String solarSystemID, String squadID, String stationID, String takesFleetWarp, String wingID) throws ApiException {
        com.squareup.okhttp.Call call = getFleetMembersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, characterID, joinTime, role, roleName, shipTypeID, solarSystemID, squadID, stationID, takesFleetWarp, wingID, null);
        Type localVarReturnType = new TypeToken<List<FleetMember>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get fleet membership info (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet member fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param characterID Fleet member character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param joinTime Fleet member join time selector (optional, default to &quot;{ any: true }&quot;)
     * @param role Fleet member role selector (optional, default to &quot;{ any: true }&quot;)
     * @param roleName Fleet member role name selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Fleet member ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Fleet member solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet member squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Fleet member station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param takesFleetWarp Fleet member &#39;takes fleet warp&#39; selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet member wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFleetMembersAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String characterID, String joinTime, String role, String roleName, String shipTypeID, String solarSystemID, String squadID, String stationID, String takesFleetWarp, String wingID, final ApiCallback<List<FleetMember>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getFleetMembersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, characterID, joinTime, role, roleName, shipTypeID, solarSystemID, squadID, stationID, takesFleetWarp, wingID, callback);
        Type localVarReturnType = new TypeToken<List<FleetMember>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFleetSquads
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet squad fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet squad wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Fleet squad name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFleetSquadsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String squadID, String name, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/fleet_squads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (fleetID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fleetID", fleetID));
        }

        if (wingID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("wingID", wingID));
        }

        if (squadID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("squadID", squadID));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFleetSquadsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String squadID, String name, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getFleetSquads(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getFleetSquads(Async)");
        }
        

        com.squareup.okhttp.Call call = getFleetSquadsCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, wingID, squadID, name, callback);
        return call;

    }

    /**
     * Get fleet squad info
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet squad fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet squad wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Fleet squad name selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;FleetSquad&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FleetSquad> getFleetSquads(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String squadID, String name) throws ApiException {
        ApiResponse<List<FleetSquad>> resp = getFleetSquadsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, wingID, squadID, name);
        return resp.getData();
    }

    /**
     * Get fleet squad info
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet squad fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet squad wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Fleet squad name selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;FleetSquad&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FleetSquad>> getFleetSquadsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String squadID, String name) throws ApiException {
        com.squareup.okhttp.Call call = getFleetSquadsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, wingID, squadID, name, null);
        Type localVarReturnType = new TypeToken<List<FleetSquad>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get fleet squad info (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet squad fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet squad wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param squadID Fleet squad ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Fleet squad name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFleetSquadsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String squadID, String name, final ApiCallback<List<FleetSquad>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getFleetSquadsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, wingID, squadID, name, callback);
        Type localVarReturnType = new TypeToken<List<FleetSquad>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFleetWings
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet wing fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Fleet wing name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFleetWingsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String name, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/fleet_wings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (fleetID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fleetID", fleetID));
        }

        if (wingID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("wingID", wingID));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFleetWingsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String name, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getFleetWings(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getFleetWings(Async)");
        }
        

        com.squareup.okhttp.Call call = getFleetWingsCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, wingID, name, callback);
        return call;

    }

    /**
     * Get fleet wing info
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet wing fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Fleet wing name selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;FleetWing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FleetWing> getFleetWings(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String name) throws ApiException {
        ApiResponse<List<FleetWing>> resp = getFleetWingsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, wingID, name);
        return resp.getData();
    }

    /**
     * Get fleet wing info
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet wing fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Fleet wing name selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;FleetWing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FleetWing>> getFleetWingsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String name) throws ApiException {
        com.squareup.okhttp.Call call = getFleetWingsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, wingID, name, null);
        Type localVarReturnType = new TypeToken<List<FleetWing>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get fleet wing info (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param fleetID Fleet wing fleet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param wingID Fleet wing ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Fleet wing name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFleetWingsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String fleetID, String wingID, String name, final ApiCallback<List<FleetWing>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getFleetWingsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, fleetID, wingID, name, callback);
        Type localVarReturnType = new TypeToken<List<FleetWing>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getImplants
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param typeID Implant type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getImplantsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/implant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getImplantsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getImplants(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getImplants(Async)");
        }
        

        com.squareup.okhttp.Call call = getImplantsCall(accessKey, accessCred, at, contid, maxresults, reverse, typeID, callback);
        return call;

    }

    /**
     * Get character implants
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param typeID Implant type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Implant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Implant> getImplants(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID) throws ApiException {
        ApiResponse<List<Implant>> resp = getImplantsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, typeID);
        return resp.getData();
    }

    /**
     * Get character implants
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param typeID Implant type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Implant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Implant>> getImplantsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID) throws ApiException {
        com.squareup.okhttp.Call call = getImplantsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, typeID, null);
        Type localVarReturnType = new TypeToken<List<Implant>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character implants (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param typeID Implant type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getImplantsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID, final ApiCallback<List<Implant>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getImplantsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, typeID, callback);
        Type localVarReturnType = new TypeToken<List<Implant>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJumpCloneImplants
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpCloneID Jump clone ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Implant type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJumpCloneImplantsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String typeID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/jump_clone_implant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (jumpCloneID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("jumpCloneID", jumpCloneID));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJumpCloneImplantsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String typeID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getJumpCloneImplants(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getJumpCloneImplants(Async)");
        }
        

        com.squareup.okhttp.Call call = getJumpCloneImplantsCall(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, typeID, callback);
        return call;

    }

    /**
     * Get character jump clone implants
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpCloneID Jump clone ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Implant type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;JumpCloneImplant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JumpCloneImplant> getJumpCloneImplants(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String typeID) throws ApiException {
        ApiResponse<List<JumpCloneImplant>> resp = getJumpCloneImplantsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, typeID);
        return resp.getData();
    }

    /**
     * Get character jump clone implants
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpCloneID Jump clone ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Implant type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;JumpCloneImplant&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JumpCloneImplant>> getJumpCloneImplantsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String typeID) throws ApiException {
        com.squareup.okhttp.Call call = getJumpCloneImplantsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, typeID, null);
        Type localVarReturnType = new TypeToken<List<JumpCloneImplant>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character jump clone implants (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpCloneID Jump clone ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Implant type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJumpCloneImplantsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String typeID, final ApiCallback<List<JumpCloneImplant>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getJumpCloneImplantsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, typeID, callback);
        Type localVarReturnType = new TypeToken<List<JumpCloneImplant>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJumpClones
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpCloneID Jump clone ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Jump clone location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param cloneName Clone name selector selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationType Location type selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJumpClonesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String locationID, String cloneName, String locationType, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/jump_clone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (jumpCloneID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("jumpCloneID", jumpCloneID));
        }

        if (locationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationID", locationID));
        }

        if (cloneName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("cloneName", cloneName));
        }

        if (locationType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationType", locationType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJumpClonesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String locationID, String cloneName, String locationType, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getJumpClones(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getJumpClones(Async)");
        }
        

        com.squareup.okhttp.Call call = getJumpClonesCall(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, locationID, cloneName, locationType, callback);
        return call;

    }

    /**
     * Get character jump clones
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpCloneID Jump clone ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Jump clone location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param cloneName Clone name selector selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationType Location type selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;JumpClone&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JumpClone> getJumpClones(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String locationID, String cloneName, String locationType) throws ApiException {
        ApiResponse<List<JumpClone>> resp = getJumpClonesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, locationID, cloneName, locationType);
        return resp.getData();
    }

    /**
     * Get character jump clones
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpCloneID Jump clone ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Jump clone location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param cloneName Clone name selector selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationType Location type selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;JumpClone&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JumpClone>> getJumpClonesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String locationID, String cloneName, String locationType) throws ApiException {
        com.squareup.okhttp.Call call = getJumpClonesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, locationID, cloneName, locationType, null);
        Type localVarReturnType = new TypeToken<List<JumpClone>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character jump clones (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpCloneID Jump clone ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Jump clone location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param cloneName Clone name selector selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationType Location type selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJumpClonesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpCloneID, String locationID, String cloneName, String locationType, final ApiCallback<List<JumpClone>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getJumpClonesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, locationID, cloneName, locationType, callback);
        Type localVarReturnType = new TypeToken<List<JumpClone>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJumpTimers
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpActivation Jump activation selector (optional, default to &quot;{ any: true }&quot;)
     * @param jumpFatigue Jump fatigue selector (optional, default to &quot;{ any: true }&quot;)
     * @param jumpLastUpdate Jump last update time selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJumpTimersCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpActivation, String jumpFatigue, String jumpLastUpdate, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/jump_timer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (jumpActivation != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("jumpActivation", jumpActivation));
        }

        if (jumpFatigue != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("jumpFatigue", jumpFatigue));
        }

        if (jumpLastUpdate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("jumpLastUpdate", jumpLastUpdate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJumpTimersValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpActivation, String jumpFatigue, String jumpLastUpdate, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getJumpTimers(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getJumpTimers(Async)");
        }
        

        com.squareup.okhttp.Call call = getJumpTimersCall(accessKey, accessCred, at, contid, maxresults, reverse, jumpActivation, jumpFatigue, jumpLastUpdate, callback);
        return call;

    }

    /**
     * Get character jump timers
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpActivation Jump activation selector (optional, default to &quot;{ any: true }&quot;)
     * @param jumpFatigue Jump fatigue selector (optional, default to &quot;{ any: true }&quot;)
     * @param jumpLastUpdate Jump last update time selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterSheetJump&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterSheetJump> getJumpTimers(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpActivation, String jumpFatigue, String jumpLastUpdate) throws ApiException {
        ApiResponse<List<CharacterSheetJump>> resp = getJumpTimersWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, jumpActivation, jumpFatigue, jumpLastUpdate);
        return resp.getData();
    }

    /**
     * Get character jump timers
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpActivation Jump activation selector (optional, default to &quot;{ any: true }&quot;)
     * @param jumpFatigue Jump fatigue selector (optional, default to &quot;{ any: true }&quot;)
     * @param jumpLastUpdate Jump last update time selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterSheetJump&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterSheetJump>> getJumpTimersWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpActivation, String jumpFatigue, String jumpLastUpdate) throws ApiException {
        com.squareup.okhttp.Call call = getJumpTimersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, jumpActivation, jumpFatigue, jumpLastUpdate, null);
        Type localVarReturnType = new TypeToken<List<CharacterSheetJump>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character jump timers (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jumpActivation Jump activation selector (optional, default to &quot;{ any: true }&quot;)
     * @param jumpFatigue Jump fatigue selector (optional, default to &quot;{ any: true }&quot;)
     * @param jumpLastUpdate Jump last update time selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJumpTimersAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jumpActivation, String jumpFatigue, String jumpLastUpdate, final ApiCallback<List<CharacterSheetJump>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getJumpTimersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, jumpActivation, jumpFatigue, jumpLastUpdate, callback);
        Type localVarReturnType = new TypeToken<List<CharacterSheetJump>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocation
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param structureID Structure ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String solarSystemID, String stationID, String structureID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/location";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (solarSystemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("solarSystemID", solarSystemID));
        }

        if (stationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("stationID", stationID));
        }

        if (structureID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("structureID", structureID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String solarSystemID, String stationID, String structureID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getLocation(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getLocation(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationCall(accessKey, accessCred, at, contid, maxresults, reverse, solarSystemID, stationID, structureID, callback);
        return call;

    }

    /**
     * Get character location
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param structureID Structure ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterLocation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterLocation> getLocation(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String solarSystemID, String stationID, String structureID) throws ApiException {
        ApiResponse<List<CharacterLocation>> resp = getLocationWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, solarSystemID, stationID, structureID);
        return resp.getData();
    }

    /**
     * Get character location
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param structureID Structure ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterLocation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterLocation>> getLocationWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String solarSystemID, String stationID, String structureID) throws ApiException {
        com.squareup.okhttp.Call call = getLocationValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, solarSystemID, stationID, structureID, null);
        Type localVarReturnType = new TypeToken<List<CharacterLocation>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character location (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param structureID Structure ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String solarSystemID, String stationID, String structureID, final ApiCallback<List<CharacterLocation>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getLocationValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, solarSystemID, stationID, structureID, callback);
        Type localVarReturnType = new TypeToken<List<CharacterLocation>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLoyaltyPoints
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param corporationID Corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param loyaltyPoints Loyalty points selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyPointsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String corporationID, String loyaltyPoints, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/loyalty_points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (corporationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("corporationID", corporationID));
        }

        if (loyaltyPoints != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("loyaltyPoints", loyaltyPoints));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLoyaltyPointsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String corporationID, String loyaltyPoints, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getLoyaltyPoints(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getLoyaltyPoints(Async)");
        }
        

        com.squareup.okhttp.Call call = getLoyaltyPointsCall(accessKey, accessCred, at, contid, maxresults, reverse, corporationID, loyaltyPoints, callback);
        return call;

    }

    /**
     * Get character loyalty points
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param corporationID Corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param loyaltyPoints Loyalty points selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;LoyaltyPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<LoyaltyPoints> getLoyaltyPoints(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String corporationID, String loyaltyPoints) throws ApiException {
        ApiResponse<List<LoyaltyPoints>> resp = getLoyaltyPointsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, corporationID, loyaltyPoints);
        return resp.getData();
    }

    /**
     * Get character loyalty points
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param corporationID Corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param loyaltyPoints Loyalty points selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;LoyaltyPoints&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<LoyaltyPoints>> getLoyaltyPointsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String corporationID, String loyaltyPoints) throws ApiException {
        com.squareup.okhttp.Call call = getLoyaltyPointsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, corporationID, loyaltyPoints, null);
        Type localVarReturnType = new TypeToken<List<LoyaltyPoints>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character loyalty points (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param corporationID Corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param loyaltyPoints Loyalty points selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLoyaltyPointsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String corporationID, String loyaltyPoints, final ApiCallback<List<LoyaltyPoints>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getLoyaltyPointsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, corporationID, loyaltyPoints, callback);
        Type localVarReturnType = new TypeToken<List<LoyaltyPoints>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailLabels
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param labelID Mail label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param unreadCount Mail label unread count selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Mail label name selector (optional, default to &quot;{ any: true }&quot;)
     * @param color Mail label color selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailLabelsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String labelID, String unreadCount, String name, String color, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/mail_label";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (labelID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("labelID", labelID));
        }

        if (unreadCount != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("unreadCount", unreadCount));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        if (color != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("color", color));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailLabelsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String labelID, String unreadCount, String name, String color, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getMailLabels(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getMailLabels(Async)");
        }
        

        com.squareup.okhttp.Call call = getMailLabelsCall(accessKey, accessCred, at, contid, maxresults, reverse, labelID, unreadCount, name, color, callback);
        return call;

    }

    /**
     * Get character mail labels
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param labelID Mail label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param unreadCount Mail label unread count selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Mail label name selector (optional, default to &quot;{ any: true }&quot;)
     * @param color Mail label color selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;MailLabel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MailLabel> getMailLabels(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String labelID, String unreadCount, String name, String color) throws ApiException {
        ApiResponse<List<MailLabel>> resp = getMailLabelsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, labelID, unreadCount, name, color);
        return resp.getData();
    }

    /**
     * Get character mail labels
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param labelID Mail label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param unreadCount Mail label unread count selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Mail label name selector (optional, default to &quot;{ any: true }&quot;)
     * @param color Mail label color selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;MailLabel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MailLabel>> getMailLabelsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String labelID, String unreadCount, String name, String color) throws ApiException {
        com.squareup.okhttp.Call call = getMailLabelsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, labelID, unreadCount, name, color, null);
        Type localVarReturnType = new TypeToken<List<MailLabel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character mail labels (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param labelID Mail label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param unreadCount Mail label unread count selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Mail label name selector (optional, default to &quot;{ any: true }&quot;)
     * @param color Mail label color selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailLabelsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String labelID, String unreadCount, String name, String color, final ApiCallback<List<MailLabel>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getMailLabelsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, labelID, unreadCount, name, color, callback);
        Type localVarReturnType = new TypeToken<List<MailLabel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailMessages
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param messageID Message ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Message sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Message send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Message title selector (optional, default to &quot;{ any: true }&quot;)
     * @param msgRead Message read selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Message label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param recipientType Message recipient type selector (optional, default to &quot;{ any: true }&quot;)
     * @param recipientID Message recipient ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param body Message body selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailMessagesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String messageID, String senderID, String sentDate, String title, String msgRead, String labelID, String recipientType, String recipientID, String body, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/mail_message";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (messageID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("messageID", messageID));
        }

        if (senderID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("senderID", senderID));
        }

        if (sentDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sentDate", sentDate));
        }

        if (title != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("title", title));
        }

        if (msgRead != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("msgRead", msgRead));
        }

        if (labelID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("labelID", labelID));
        }

        if (recipientType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientType", recipientType));
        }

        if (recipientID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recipientID", recipientID));
        }

        if (body != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("body", body));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailMessagesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String messageID, String senderID, String sentDate, String title, String msgRead, String labelID, String recipientType, String recipientID, String body, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getMailMessages(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getMailMessages(Async)");
        }
        

        com.squareup.okhttp.Call call = getMailMessagesCall(accessKey, accessCred, at, contid, maxresults, reverse, messageID, senderID, sentDate, title, msgRead, labelID, recipientType, recipientID, body, callback);
        return call;

    }

    /**
     * Get character mail messages
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param messageID Message ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Message sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Message send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Message title selector (optional, default to &quot;{ any: true }&quot;)
     * @param msgRead Message read selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Message label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param recipientType Message recipient type selector (optional, default to &quot;{ any: true }&quot;)
     * @param recipientID Message recipient ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param body Message body selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterMailMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterMailMessage> getMailMessages(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String messageID, String senderID, String sentDate, String title, String msgRead, String labelID, String recipientType, String recipientID, String body) throws ApiException {
        ApiResponse<List<CharacterMailMessage>> resp = getMailMessagesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, messageID, senderID, sentDate, title, msgRead, labelID, recipientType, recipientID, body);
        return resp.getData();
    }

    /**
     * Get character mail messages
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param messageID Message ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Message sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Message send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Message title selector (optional, default to &quot;{ any: true }&quot;)
     * @param msgRead Message read selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Message label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param recipientType Message recipient type selector (optional, default to &quot;{ any: true }&quot;)
     * @param recipientID Message recipient ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param body Message body selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterMailMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterMailMessage>> getMailMessagesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String messageID, String senderID, String sentDate, String title, String msgRead, String labelID, String recipientType, String recipientID, String body) throws ApiException {
        com.squareup.okhttp.Call call = getMailMessagesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, messageID, senderID, sentDate, title, msgRead, labelID, recipientType, recipientID, body, null);
        Type localVarReturnType = new TypeToken<List<CharacterMailMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character mail messages (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param messageID Message ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Message sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Message send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Message title selector (optional, default to &quot;{ any: true }&quot;)
     * @param msgRead Message read selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Message label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param recipientType Message recipient type selector (optional, default to &quot;{ any: true }&quot;)
     * @param recipientID Message recipient ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param body Message body selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailMessagesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String messageID, String senderID, String sentDate, String title, String msgRead, String labelID, String recipientType, String recipientID, String body, final ApiCallback<List<CharacterMailMessage>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getMailMessagesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, messageID, senderID, sentDate, title, msgRead, labelID, recipientType, recipientID, body, callback);
        Type localVarReturnType = new TypeToken<List<CharacterMailMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMailingLists
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param displayName Mailing list display name selector (optional, default to &quot;{ any: true }&quot;)
     * @param listID Mailing list ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMailingListsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String displayName, String listID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/mailing_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (displayName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("displayName", displayName));
        }

        if (listID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("listID", listID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMailingListsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String displayName, String listID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getMailingLists(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getMailingLists(Async)");
        }
        

        com.squareup.okhttp.Call call = getMailingListsCall(accessKey, accessCred, at, contid, maxresults, reverse, displayName, listID, callback);
        return call;

    }

    /**
     * Get character mailing lists
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param displayName Mailing list display name selector (optional, default to &quot;{ any: true }&quot;)
     * @param listID Mailing list ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;MailingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MailingList> getMailingLists(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String displayName, String listID) throws ApiException {
        ApiResponse<List<MailingList>> resp = getMailingListsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, displayName, listID);
        return resp.getData();
    }

    /**
     * Get character mailing lists
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param displayName Mailing list display name selector (optional, default to &quot;{ any: true }&quot;)
     * @param listID Mailing list ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;MailingList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MailingList>> getMailingListsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String displayName, String listID) throws ApiException {
        com.squareup.okhttp.Call call = getMailingListsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, displayName, listID, null);
        Type localVarReturnType = new TypeToken<List<MailingList>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character mailing lists (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param displayName Mailing list display name selector (optional, default to &quot;{ any: true }&quot;)
     * @param listID Mailing list ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMailingListsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String displayName, String listID, final ApiCallback<List<MailingList>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getMailingListsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, displayName, listID, callback);
        Type localVarReturnType = new TypeToken<List<MailingList>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMedalGraphics
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param medalID Medal ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Medal issued selector (optional, default to &quot;{ any: true }&quot;)
     * @param part Medal graphic part selector (optional, default to &quot;{ any: true }&quot;)
     * @param layer Medal graphic layer selector (optional, default to &quot;{ any: true }&quot;)
     * @param graphic Medal graphic name selector (optional, default to &quot;{ any: true }&quot;)
     * @param color Medal graphic color selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMedalGraphicsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String medalID, String issued, String part, String layer, String graphic, String color, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/medal_graphic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (medalID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("medalID", medalID));
        }

        if (issued != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("issued", issued));
        }

        if (part != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("part", part));
        }

        if (layer != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("layer", layer));
        }

        if (graphic != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("graphic", graphic));
        }

        if (color != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("color", color));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMedalGraphicsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String medalID, String issued, String part, String layer, String graphic, String color, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getMedalGraphics(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getMedalGraphics(Async)");
        }
        

        com.squareup.okhttp.Call call = getMedalGraphicsCall(accessKey, accessCred, at, contid, maxresults, reverse, medalID, issued, part, layer, graphic, color, callback);
        return call;

    }

    /**
     * Get character medal graphics
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param medalID Medal ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Medal issued selector (optional, default to &quot;{ any: true }&quot;)
     * @param part Medal graphic part selector (optional, default to &quot;{ any: true }&quot;)
     * @param layer Medal graphic layer selector (optional, default to &quot;{ any: true }&quot;)
     * @param graphic Medal graphic name selector (optional, default to &quot;{ any: true }&quot;)
     * @param color Medal graphic color selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterMedalGraphic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterMedalGraphic> getMedalGraphics(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String medalID, String issued, String part, String layer, String graphic, String color) throws ApiException {
        ApiResponse<List<CharacterMedalGraphic>> resp = getMedalGraphicsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, medalID, issued, part, layer, graphic, color);
        return resp.getData();
    }

    /**
     * Get character medal graphics
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param medalID Medal ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Medal issued selector (optional, default to &quot;{ any: true }&quot;)
     * @param part Medal graphic part selector (optional, default to &quot;{ any: true }&quot;)
     * @param layer Medal graphic layer selector (optional, default to &quot;{ any: true }&quot;)
     * @param graphic Medal graphic name selector (optional, default to &quot;{ any: true }&quot;)
     * @param color Medal graphic color selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterMedalGraphic&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterMedalGraphic>> getMedalGraphicsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String medalID, String issued, String part, String layer, String graphic, String color) throws ApiException {
        com.squareup.okhttp.Call call = getMedalGraphicsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, medalID, issued, part, layer, graphic, color, null);
        Type localVarReturnType = new TypeToken<List<CharacterMedalGraphic>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character medal graphics (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param medalID Medal ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Medal issued selector (optional, default to &quot;{ any: true }&quot;)
     * @param part Medal graphic part selector (optional, default to &quot;{ any: true }&quot;)
     * @param layer Medal graphic layer selector (optional, default to &quot;{ any: true }&quot;)
     * @param graphic Medal graphic name selector (optional, default to &quot;{ any: true }&quot;)
     * @param color Medal graphic color selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMedalGraphicsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String medalID, String issued, String part, String layer, String graphic, String color, final ApiCallback<List<CharacterMedalGraphic>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getMedalGraphicsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, medalID, issued, part, layer, graphic, color, callback);
        Type localVarReturnType = new TypeToken<List<CharacterMedalGraphic>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMedals
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param description Medal description selector (optional, default to &quot;{ any: true }&quot;)
     * @param medalID Medal ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Medal title selector (optional, default to &quot;{ any: true }&quot;)
     * @param corporationID Awarding corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Issue date selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerID Issuer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Medal award reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Medal status selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMedalsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String description, String medalID, String title, String corporationID, String issued, String issuerID, String reason, String status, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/medal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (description != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        }

        if (medalID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("medalID", medalID));
        }

        if (title != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("title", title));
        }

        if (corporationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("corporationID", corporationID));
        }

        if (issued != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("issued", issued));
        }

        if (issuerID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("issuerID", issuerID));
        }

        if (reason != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reason", reason));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMedalsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String description, String medalID, String title, String corporationID, String issued, String issuerID, String reason, String status, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getMedals(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getMedals(Async)");
        }
        

        com.squareup.okhttp.Call call = getMedalsCall(accessKey, accessCred, at, contid, maxresults, reverse, description, medalID, title, corporationID, issued, issuerID, reason, status, callback);
        return call;

    }

    /**
     * Get character medals
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param description Medal description selector (optional, default to &quot;{ any: true }&quot;)
     * @param medalID Medal ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Medal title selector (optional, default to &quot;{ any: true }&quot;)
     * @param corporationID Awarding corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Issue date selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerID Issuer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Medal award reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Medal status selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterMedal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterMedal> getMedals(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String description, String medalID, String title, String corporationID, String issued, String issuerID, String reason, String status) throws ApiException {
        ApiResponse<List<CharacterMedal>> resp = getMedalsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, description, medalID, title, corporationID, issued, issuerID, reason, status);
        return resp.getData();
    }

    /**
     * Get character medals
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param description Medal description selector (optional, default to &quot;{ any: true }&quot;)
     * @param medalID Medal ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Medal title selector (optional, default to &quot;{ any: true }&quot;)
     * @param corporationID Awarding corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Issue date selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerID Issuer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Medal award reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Medal status selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterMedal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterMedal>> getMedalsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String description, String medalID, String title, String corporationID, String issued, String issuerID, String reason, String status) throws ApiException {
        com.squareup.okhttp.Call call = getMedalsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, description, medalID, title, corporationID, issued, issuerID, reason, status, null);
        Type localVarReturnType = new TypeToken<List<CharacterMedal>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character medals (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param description Medal description selector (optional, default to &quot;{ any: true }&quot;)
     * @param medalID Medal ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Medal title selector (optional, default to &quot;{ any: true }&quot;)
     * @param corporationID Awarding corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Issue date selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerID Issuer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Medal award reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Medal status selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMedalsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String description, String medalID, String title, String corporationID, String issued, String issuerID, String reason, String status, final ApiCallback<List<CharacterMedal>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getMedalsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, description, medalID, title, corporationID, issued, issuerID, reason, status, callback);
        Type localVarReturnType = new TypeToken<List<CharacterMedal>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMiningLedger
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param date Date selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMiningLedgerCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String date, String solarSystemID, String typeID, String quantity, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/mining_ledger";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (date != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        }

        if (solarSystemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("solarSystemID", solarSystemID));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMiningLedgerValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String date, String solarSystemID, String typeID, String quantity, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getMiningLedger(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getMiningLedger(Async)");
        }
        

        com.squareup.okhttp.Call call = getMiningLedgerCall(accessKey, accessCred, at, contid, maxresults, reverse, date, solarSystemID, typeID, quantity, callback);
        return call;

    }

    /**
     * Get character mining ledger
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param date Date selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;MiningLedger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MiningLedger> getMiningLedger(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String date, String solarSystemID, String typeID, String quantity) throws ApiException {
        ApiResponse<List<MiningLedger>> resp = getMiningLedgerWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, date, solarSystemID, typeID, quantity);
        return resp.getData();
    }

    /**
     * Get character mining ledger
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param date Date selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;MiningLedger&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MiningLedger>> getMiningLedgerWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String date, String solarSystemID, String typeID, String quantity) throws ApiException {
        com.squareup.okhttp.Call call = getMiningLedgerValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, date, solarSystemID, typeID, quantity, null);
        Type localVarReturnType = new TypeToken<List<MiningLedger>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character mining ledger (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param date Date selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMiningLedgerAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String date, String solarSystemID, String typeID, String quantity, final ApiCallback<List<MiningLedger>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getMiningLedgerValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, date, solarSystemID, typeID, quantity, callback);
        Type localVarReturnType = new TypeToken<List<MiningLedger>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNotifications
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param notificationID Notification ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param type Notification type selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Notification sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderType Notification sender type selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Notification send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param msgRead Notification read selector (optional, default to &quot;{ any: true }&quot;)
     * @param text Notification text selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNotificationsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String type, String senderID, String senderType, String sentDate, String msgRead, String text, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/notification";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (notificationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("notificationID", notificationID));
        }

        if (type != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        }

        if (senderID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("senderID", senderID));
        }

        if (senderType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("senderType", senderType));
        }

        if (sentDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sentDate", sentDate));
        }

        if (msgRead != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("msgRead", msgRead));
        }

        if (text != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNotificationsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String type, String senderID, String senderType, String sentDate, String msgRead, String text, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getNotifications(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getNotifications(Async)");
        }
        

        com.squareup.okhttp.Call call = getNotificationsCall(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, type, senderID, senderType, sentDate, msgRead, text, callback);
        return call;

    }

    /**
     * Get character notifications (not bodies)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param notificationID Notification ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param type Notification type selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Notification sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderType Notification sender type selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Notification send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param msgRead Notification read selector (optional, default to &quot;{ any: true }&quot;)
     * @param text Notification text selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterNotification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterNotification> getNotifications(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String type, String senderID, String senderType, String sentDate, String msgRead, String text) throws ApiException {
        ApiResponse<List<CharacterNotification>> resp = getNotificationsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, type, senderID, senderType, sentDate, msgRead, text);
        return resp.getData();
    }

    /**
     * Get character notifications (not bodies)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param notificationID Notification ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param type Notification type selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Notification sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderType Notification sender type selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Notification send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param msgRead Notification read selector (optional, default to &quot;{ any: true }&quot;)
     * @param text Notification text selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterNotification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterNotification>> getNotificationsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String type, String senderID, String senderType, String sentDate, String msgRead, String text) throws ApiException {
        com.squareup.okhttp.Call call = getNotificationsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, type, senderID, senderType, sentDate, msgRead, text, null);
        Type localVarReturnType = new TypeToken<List<CharacterNotification>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character notifications (not bodies) (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param notificationID Notification ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param type Notification type selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderID Notification sender ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param senderType Notification sender type selector (optional, default to &quot;{ any: true }&quot;)
     * @param sentDate Notification send date selector (optional, default to &quot;{ any: true }&quot;)
     * @param msgRead Notification read selector (optional, default to &quot;{ any: true }&quot;)
     * @param text Notification text selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNotificationsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String notificationID, String type, String senderID, String senderType, String sentDate, String msgRead, String text, final ApiCallback<List<CharacterNotification>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getNotificationsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, type, senderID, senderType, sentDate, msgRead, text, callback);
        Type localVarReturnType = new TypeToken<List<CharacterNotification>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOnline
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param online Online selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastLogin Last login selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastLogout Last logout selector (optional, default to &quot;{ any: true }&quot;)
     * @param logins Logins selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOnlineCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String online, String lastLogin, String lastLogout, String logins, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/online";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (online != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("online", online));
        }

        if (lastLogin != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("lastLogin", lastLogin));
        }

        if (lastLogout != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("lastLogout", lastLogout));
        }

        if (logins != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("logins", logins));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOnlineValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String online, String lastLogin, String lastLogout, String logins, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getOnline(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getOnline(Async)");
        }
        

        com.squareup.okhttp.Call call = getOnlineCall(accessKey, accessCred, at, contid, maxresults, reverse, online, lastLogin, lastLogout, logins, callback);
        return call;

    }

    /**
     * Get character online data
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param online Online selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastLogin Last login selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastLogout Last logout selector (optional, default to &quot;{ any: true }&quot;)
     * @param logins Logins selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterOnline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterOnline> getOnline(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String online, String lastLogin, String lastLogout, String logins) throws ApiException {
        ApiResponse<List<CharacterOnline>> resp = getOnlineWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, online, lastLogin, lastLogout, logins);
        return resp.getData();
    }

    /**
     * Get character online data
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param online Online selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastLogin Last login selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastLogout Last logout selector (optional, default to &quot;{ any: true }&quot;)
     * @param logins Logins selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterOnline&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterOnline>> getOnlineWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String online, String lastLogin, String lastLogout, String logins) throws ApiException {
        com.squareup.okhttp.Call call = getOnlineValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, online, lastLogin, lastLogout, logins, null);
        Type localVarReturnType = new TypeToken<List<CharacterOnline>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character online data (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param online Online selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastLogin Last login selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastLogout Last logout selector (optional, default to &quot;{ any: true }&quot;)
     * @param logins Logins selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOnlineAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String online, String lastLogin, String lastLogout, String logins, final ApiCallback<List<CharacterOnline>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getOnlineValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, online, lastLogin, lastLogout, logins, callback);
        Type localVarReturnType = new TypeToken<List<CharacterOnline>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOpportunities
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param taskID Opportunity task ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedAt Opportunity &#39;completed at&#39; time selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOpportunitiesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String taskID, String completedAt, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/opportunities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (taskID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("taskID", taskID));
        }

        if (completedAt != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("completedAt", completedAt));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOpportunitiesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String taskID, String completedAt, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getOpportunities(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getOpportunities(Async)");
        }
        

        com.squareup.okhttp.Call call = getOpportunitiesCall(accessKey, accessCred, at, contid, maxresults, reverse, taskID, completedAt, callback);
        return call;

    }

    /**
     * Get opportunities
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param taskID Opportunity task ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedAt Opportunity &#39;completed at&#39; time selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Opportunity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Opportunity> getOpportunities(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String taskID, String completedAt) throws ApiException {
        ApiResponse<List<Opportunity>> resp = getOpportunitiesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, taskID, completedAt);
        return resp.getData();
    }

    /**
     * Get opportunities
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param taskID Opportunity task ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedAt Opportunity &#39;completed at&#39; time selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Opportunity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Opportunity>> getOpportunitiesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String taskID, String completedAt) throws ApiException {
        com.squareup.okhttp.Call call = getOpportunitiesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, taskID, completedAt, null);
        Type localVarReturnType = new TypeToken<List<Opportunity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get opportunities (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param taskID Opportunity task ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedAt Opportunity &#39;completed at&#39; time selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOpportunitiesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String taskID, String completedAt, final ApiCallback<List<Opportunity>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getOpportunitiesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, taskID, completedAt, callback);
        Type localVarReturnType = new TypeToken<List<Opportunity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPlanetaryColonies
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param planetType Planet type selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Colony owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastUpdate Colony last update selector (optional, default to &quot;{ any: true }&quot;)
     * @param upgradeLevel Colony upgrade level selector (optional, default to &quot;{ any: true }&quot;)
     * @param numberOfPins Colony number of pins selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlanetaryColoniesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String solarSystemID, String planetType, String ownerID, String lastUpdate, String upgradeLevel, String numberOfPins, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/planetary_colony";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (planetID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("planetID", planetID));
        }

        if (solarSystemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("solarSystemID", solarSystemID));
        }

        if (planetType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("planetType", planetType));
        }

        if (ownerID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ownerID", ownerID));
        }

        if (lastUpdate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("lastUpdate", lastUpdate));
        }

        if (upgradeLevel != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("upgradeLevel", upgradeLevel));
        }

        if (numberOfPins != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("numberOfPins", numberOfPins));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlanetaryColoniesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String solarSystemID, String planetType, String ownerID, String lastUpdate, String upgradeLevel, String numberOfPins, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getPlanetaryColonies(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getPlanetaryColonies(Async)");
        }
        

        com.squareup.okhttp.Call call = getPlanetaryColoniesCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, solarSystemID, planetType, ownerID, lastUpdate, upgradeLevel, numberOfPins, callback);
        return call;

    }

    /**
     * Get planetary colonies
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param planetType Planet type selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Colony owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastUpdate Colony last update selector (optional, default to &quot;{ any: true }&quot;)
     * @param upgradeLevel Colony upgrade level selector (optional, default to &quot;{ any: true }&quot;)
     * @param numberOfPins Colony number of pins selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;PlanetaryColony&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PlanetaryColony> getPlanetaryColonies(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String solarSystemID, String planetType, String ownerID, String lastUpdate, String upgradeLevel, String numberOfPins) throws ApiException {
        ApiResponse<List<PlanetaryColony>> resp = getPlanetaryColoniesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, planetID, solarSystemID, planetType, ownerID, lastUpdate, upgradeLevel, numberOfPins);
        return resp.getData();
    }

    /**
     * Get planetary colonies
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param planetType Planet type selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Colony owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastUpdate Colony last update selector (optional, default to &quot;{ any: true }&quot;)
     * @param upgradeLevel Colony upgrade level selector (optional, default to &quot;{ any: true }&quot;)
     * @param numberOfPins Colony number of pins selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;PlanetaryColony&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PlanetaryColony>> getPlanetaryColoniesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String solarSystemID, String planetType, String ownerID, String lastUpdate, String upgradeLevel, String numberOfPins) throws ApiException {
        com.squareup.okhttp.Call call = getPlanetaryColoniesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, solarSystemID, planetType, ownerID, lastUpdate, upgradeLevel, numberOfPins, null);
        Type localVarReturnType = new TypeToken<List<PlanetaryColony>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get planetary colonies (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param planetType Planet type selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Colony owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastUpdate Colony last update selector (optional, default to &quot;{ any: true }&quot;)
     * @param upgradeLevel Colony upgrade level selector (optional, default to &quot;{ any: true }&quot;)
     * @param numberOfPins Colony number of pins selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlanetaryColoniesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String solarSystemID, String planetType, String ownerID, String lastUpdate, String upgradeLevel, String numberOfPins, final ApiCallback<List<PlanetaryColony>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getPlanetaryColoniesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, solarSystemID, planetType, ownerID, lastUpdate, upgradeLevel, numberOfPins, callback);
        Type localVarReturnType = new TypeToken<List<PlanetaryColony>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPlanetaryLinks
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sourcePinID Link source pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param destinationPinID Link destination pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param linkLevel Link level selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlanetaryLinksCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String sourcePinID, String destinationPinID, String linkLevel, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/planetary_link";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (planetID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("planetID", planetID));
        }

        if (sourcePinID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sourcePinID", sourcePinID));
        }

        if (destinationPinID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("destinationPinID", destinationPinID));
        }

        if (linkLevel != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("linkLevel", linkLevel));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlanetaryLinksValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String sourcePinID, String destinationPinID, String linkLevel, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getPlanetaryLinks(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getPlanetaryLinks(Async)");
        }
        

        com.squareup.okhttp.Call call = getPlanetaryLinksCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, sourcePinID, destinationPinID, linkLevel, callback);
        return call;

    }

    /**
     * Get planetary links
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sourcePinID Link source pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param destinationPinID Link destination pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param linkLevel Link level selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;PlanetaryLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PlanetaryLink> getPlanetaryLinks(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String sourcePinID, String destinationPinID, String linkLevel) throws ApiException {
        ApiResponse<List<PlanetaryLink>> resp = getPlanetaryLinksWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, planetID, sourcePinID, destinationPinID, linkLevel);
        return resp.getData();
    }

    /**
     * Get planetary links
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sourcePinID Link source pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param destinationPinID Link destination pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param linkLevel Link level selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;PlanetaryLink&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PlanetaryLink>> getPlanetaryLinksWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String sourcePinID, String destinationPinID, String linkLevel) throws ApiException {
        com.squareup.okhttp.Call call = getPlanetaryLinksValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, sourcePinID, destinationPinID, linkLevel, null);
        Type localVarReturnType = new TypeToken<List<PlanetaryLink>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get planetary links (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sourcePinID Link source pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param destinationPinID Link destination pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param linkLevel Link level selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlanetaryLinksAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String sourcePinID, String destinationPinID, String linkLevel, final ApiCallback<List<PlanetaryLink>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getPlanetaryLinksValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, sourcePinID, destinationPinID, linkLevel, callback);
        Type localVarReturnType = new TypeToken<List<PlanetaryLink>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPlanetaryPins
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param pinID Pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Pin type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param schematicID Pin schematic ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastCycleStart Pin last cycle start selector (optional, default to &quot;{ any: true }&quot;)
     * @param cycleTime Pin cycle time selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantityPerCycle Pin quantity per cycle selector (optional, default to &quot;{ any: true }&quot;)
     * @param installTime Pin install time selector (optional, default to &quot;{ any: true }&quot;)
     * @param expiryTime Pin expiry time selector (optional, default to &quot;{ any: true }&quot;)
     * @param productTypeID Pin product type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param longitude Pin longitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param latitude Pin latitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param headRadius Pin head radius selector (optional, default to &quot;{ any: true }&quot;)
     * @param headID Pin head ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param headLongitude Pin head longitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param headLatitude Pin head latitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentTypeID Pin content type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentAmount Pin content amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlanetaryPinsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String pinID, String typeID, String schematicID, String lastCycleStart, String cycleTime, String quantityPerCycle, String installTime, String expiryTime, String productTypeID, String longitude, String latitude, String headRadius, String headID, String headLongitude, String headLatitude, String contentTypeID, String contentAmount, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/planetary_pin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (planetID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("planetID", planetID));
        }

        if (pinID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pinID", pinID));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (schematicID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("schematicID", schematicID));
        }

        if (lastCycleStart != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("lastCycleStart", lastCycleStart));
        }

        if (cycleTime != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("cycleTime", cycleTime));
        }

        if (quantityPerCycle != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("quantityPerCycle", quantityPerCycle));
        }

        if (installTime != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("installTime", installTime));
        }

        if (expiryTime != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("expiryTime", expiryTime));
        }

        if (productTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("productTypeID", productTypeID));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("longitude", longitude));
        }

        if (latitude != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("latitude", latitude));
        }

        if (headRadius != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("headRadius", headRadius));
        }

        if (headID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("headID", headID));
        }

        if (headLongitude != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("headLongitude", headLongitude));
        }

        if (headLatitude != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("headLatitude", headLatitude));
        }

        if (contentTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contentTypeID", contentTypeID));
        }

        if (contentAmount != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contentAmount", contentAmount));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlanetaryPinsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String pinID, String typeID, String schematicID, String lastCycleStart, String cycleTime, String quantityPerCycle, String installTime, String expiryTime, String productTypeID, String longitude, String latitude, String headRadius, String headID, String headLongitude, String headLatitude, String contentTypeID, String contentAmount, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getPlanetaryPins(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getPlanetaryPins(Async)");
        }
        

        com.squareup.okhttp.Call call = getPlanetaryPinsCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, pinID, typeID, schematicID, lastCycleStart, cycleTime, quantityPerCycle, installTime, expiryTime, productTypeID, longitude, latitude, headRadius, headID, headLongitude, headLatitude, contentTypeID, contentAmount, callback);
        return call;

    }

    /**
     * Get planetary pins
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param pinID Pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Pin type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param schematicID Pin schematic ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastCycleStart Pin last cycle start selector (optional, default to &quot;{ any: true }&quot;)
     * @param cycleTime Pin cycle time selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantityPerCycle Pin quantity per cycle selector (optional, default to &quot;{ any: true }&quot;)
     * @param installTime Pin install time selector (optional, default to &quot;{ any: true }&quot;)
     * @param expiryTime Pin expiry time selector (optional, default to &quot;{ any: true }&quot;)
     * @param productTypeID Pin product type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param longitude Pin longitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param latitude Pin latitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param headRadius Pin head radius selector (optional, default to &quot;{ any: true }&quot;)
     * @param headID Pin head ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param headLongitude Pin head longitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param headLatitude Pin head latitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentTypeID Pin content type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentAmount Pin content amount selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;PlanetaryPin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PlanetaryPin> getPlanetaryPins(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String pinID, String typeID, String schematicID, String lastCycleStart, String cycleTime, String quantityPerCycle, String installTime, String expiryTime, String productTypeID, String longitude, String latitude, String headRadius, String headID, String headLongitude, String headLatitude, String contentTypeID, String contentAmount) throws ApiException {
        ApiResponse<List<PlanetaryPin>> resp = getPlanetaryPinsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, planetID, pinID, typeID, schematicID, lastCycleStart, cycleTime, quantityPerCycle, installTime, expiryTime, productTypeID, longitude, latitude, headRadius, headID, headLongitude, headLatitude, contentTypeID, contentAmount);
        return resp.getData();
    }

    /**
     * Get planetary pins
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param pinID Pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Pin type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param schematicID Pin schematic ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastCycleStart Pin last cycle start selector (optional, default to &quot;{ any: true }&quot;)
     * @param cycleTime Pin cycle time selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantityPerCycle Pin quantity per cycle selector (optional, default to &quot;{ any: true }&quot;)
     * @param installTime Pin install time selector (optional, default to &quot;{ any: true }&quot;)
     * @param expiryTime Pin expiry time selector (optional, default to &quot;{ any: true }&quot;)
     * @param productTypeID Pin product type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param longitude Pin longitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param latitude Pin latitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param headRadius Pin head radius selector (optional, default to &quot;{ any: true }&quot;)
     * @param headID Pin head ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param headLongitude Pin head longitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param headLatitude Pin head latitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentTypeID Pin content type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentAmount Pin content amount selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;PlanetaryPin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PlanetaryPin>> getPlanetaryPinsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String pinID, String typeID, String schematicID, String lastCycleStart, String cycleTime, String quantityPerCycle, String installTime, String expiryTime, String productTypeID, String longitude, String latitude, String headRadius, String headID, String headLongitude, String headLatitude, String contentTypeID, String contentAmount) throws ApiException {
        com.squareup.okhttp.Call call = getPlanetaryPinsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, pinID, typeID, schematicID, lastCycleStart, cycleTime, quantityPerCycle, installTime, expiryTime, productTypeID, longitude, latitude, headRadius, headID, headLongitude, headLatitude, contentTypeID, contentAmount, null);
        Type localVarReturnType = new TypeToken<List<PlanetaryPin>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get planetary pins (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param pinID Pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Pin type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param schematicID Pin schematic ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param lastCycleStart Pin last cycle start selector (optional, default to &quot;{ any: true }&quot;)
     * @param cycleTime Pin cycle time selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantityPerCycle Pin quantity per cycle selector (optional, default to &quot;{ any: true }&quot;)
     * @param installTime Pin install time selector (optional, default to &quot;{ any: true }&quot;)
     * @param expiryTime Pin expiry time selector (optional, default to &quot;{ any: true }&quot;)
     * @param productTypeID Pin product type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param longitude Pin longitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param latitude Pin latitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param headRadius Pin head radius selector (optional, default to &quot;{ any: true }&quot;)
     * @param headID Pin head ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param headLongitude Pin head longitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param headLatitude Pin head latitude selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentTypeID Pin content type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentAmount Pin content amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlanetaryPinsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String pinID, String typeID, String schematicID, String lastCycleStart, String cycleTime, String quantityPerCycle, String installTime, String expiryTime, String productTypeID, String longitude, String latitude, String headRadius, String headID, String headLongitude, String headLatitude, String contentTypeID, String contentAmount, final ApiCallback<List<PlanetaryPin>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getPlanetaryPinsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, pinID, typeID, schematicID, lastCycleStart, cycleTime, quantityPerCycle, installTime, expiryTime, productTypeID, longitude, latitude, headRadius, headID, headLongitude, headLatitude, contentTypeID, contentAmount, callback);
        Type localVarReturnType = new TypeToken<List<PlanetaryPin>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPlanetaryRoutes
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param routeID Route ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sourcePinID Route source pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param destinationPinID Route destination pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentTypeID Route content type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Route quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param waypoint Route waypoint selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPlanetaryRoutesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String routeID, String sourcePinID, String destinationPinID, String contentTypeID, String quantity, String waypoint, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/planetary_route";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (planetID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("planetID", planetID));
        }

        if (routeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("routeID", routeID));
        }

        if (sourcePinID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sourcePinID", sourcePinID));
        }

        if (destinationPinID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("destinationPinID", destinationPinID));
        }

        if (contentTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contentTypeID", contentTypeID));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        }

        if (waypoint != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("waypoint", waypoint));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPlanetaryRoutesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String routeID, String sourcePinID, String destinationPinID, String contentTypeID, String quantity, String waypoint, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getPlanetaryRoutes(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getPlanetaryRoutes(Async)");
        }
        

        com.squareup.okhttp.Call call = getPlanetaryRoutesCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, routeID, sourcePinID, destinationPinID, contentTypeID, quantity, waypoint, callback);
        return call;

    }

    /**
     * Get planetary routes
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param routeID Route ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sourcePinID Route source pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param destinationPinID Route destination pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentTypeID Route content type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Route quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param waypoint Route waypoint selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;PlanetaryRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PlanetaryRoute> getPlanetaryRoutes(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String routeID, String sourcePinID, String destinationPinID, String contentTypeID, String quantity, String waypoint) throws ApiException {
        ApiResponse<List<PlanetaryRoute>> resp = getPlanetaryRoutesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, planetID, routeID, sourcePinID, destinationPinID, contentTypeID, quantity, waypoint);
        return resp.getData();
    }

    /**
     * Get planetary routes
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param routeID Route ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sourcePinID Route source pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param destinationPinID Route destination pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentTypeID Route content type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Route quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param waypoint Route waypoint selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;PlanetaryRoute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PlanetaryRoute>> getPlanetaryRoutesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String routeID, String sourcePinID, String destinationPinID, String contentTypeID, String quantity, String waypoint) throws ApiException {
        com.squareup.okhttp.Call call = getPlanetaryRoutesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, routeID, sourcePinID, destinationPinID, contentTypeID, quantity, waypoint, null);
        Type localVarReturnType = new TypeToken<List<PlanetaryRoute>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get planetary routes (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param planetID Planet ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param routeID Route ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param sourcePinID Route source pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param destinationPinID Route destination pin ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contentTypeID Route content type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Route quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param waypoint Route waypoint selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPlanetaryRoutesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String planetID, String routeID, String sourcePinID, String destinationPinID, String contentTypeID, String quantity, String waypoint, final ApiCallback<List<PlanetaryRoute>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getPlanetaryRoutesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, planetID, routeID, sourcePinID, destinationPinID, contentTypeID, quantity, waypoint, callback);
        Type localVarReturnType = new TypeToken<List<PlanetaryRoute>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getResearchAgents
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param agentID Research agent ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param pointsPerDay Agent points per day selector (optional, default to &quot;{ any: true }&quot;)
     * @param remainderPoints Agent remainder points selector (optional, default to &quot;{ any: true }&quot;)
     * @param researchStartDate Agent research start date selector (optional, default to &quot;{ any: true }&quot;)
     * @param skillTypeID Agent skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getResearchAgentsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String agentID, String pointsPerDay, String remainderPoints, String researchStartDate, String skillTypeID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/research_agent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (agentID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("agentID", agentID));
        }

        if (pointsPerDay != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pointsPerDay", pointsPerDay));
        }

        if (remainderPoints != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("remainderPoints", remainderPoints));
        }

        if (researchStartDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("researchStartDate", researchStartDate));
        }

        if (skillTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skillTypeID", skillTypeID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getResearchAgentsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String agentID, String pointsPerDay, String remainderPoints, String researchStartDate, String skillTypeID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getResearchAgents(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getResearchAgents(Async)");
        }
        

        com.squareup.okhttp.Call call = getResearchAgentsCall(accessKey, accessCred, at, contid, maxresults, reverse, agentID, pointsPerDay, remainderPoints, researchStartDate, skillTypeID, callback);
        return call;

    }

    /**
     * Get character research agents
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param agentID Research agent ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param pointsPerDay Agent points per day selector (optional, default to &quot;{ any: true }&quot;)
     * @param remainderPoints Agent remainder points selector (optional, default to &quot;{ any: true }&quot;)
     * @param researchStartDate Agent research start date selector (optional, default to &quot;{ any: true }&quot;)
     * @param skillTypeID Agent skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;ResearchAgent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResearchAgent> getResearchAgents(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String agentID, String pointsPerDay, String remainderPoints, String researchStartDate, String skillTypeID) throws ApiException {
        ApiResponse<List<ResearchAgent>> resp = getResearchAgentsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, agentID, pointsPerDay, remainderPoints, researchStartDate, skillTypeID);
        return resp.getData();
    }

    /**
     * Get character research agents
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param agentID Research agent ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param pointsPerDay Agent points per day selector (optional, default to &quot;{ any: true }&quot;)
     * @param remainderPoints Agent remainder points selector (optional, default to &quot;{ any: true }&quot;)
     * @param researchStartDate Agent research start date selector (optional, default to &quot;{ any: true }&quot;)
     * @param skillTypeID Agent skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;ResearchAgent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResearchAgent>> getResearchAgentsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String agentID, String pointsPerDay, String remainderPoints, String researchStartDate, String skillTypeID) throws ApiException {
        com.squareup.okhttp.Call call = getResearchAgentsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, agentID, pointsPerDay, remainderPoints, researchStartDate, skillTypeID, null);
        Type localVarReturnType = new TypeToken<List<ResearchAgent>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character research agents (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param agentID Research agent ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param pointsPerDay Agent points per day selector (optional, default to &quot;{ any: true }&quot;)
     * @param remainderPoints Agent remainder points selector (optional, default to &quot;{ any: true }&quot;)
     * @param researchStartDate Agent research start date selector (optional, default to &quot;{ any: true }&quot;)
     * @param skillTypeID Agent skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getResearchAgentsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String agentID, String pointsPerDay, String remainderPoints, String researchStartDate, String skillTypeID, final ApiCallback<List<ResearchAgent>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getResearchAgentsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, agentID, pointsPerDay, remainderPoints, researchStartDate, skillTypeID, callback);
        Type localVarReturnType = new TypeToken<List<ResearchAgent>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRoles
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param roleCategory Role category selector (optional, default to &quot;{ any: true }&quot;)
     * @param roleName Role name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRolesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String roleCategory, String roleName, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (roleCategory != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("roleCategory", roleCategory));
        }

        if (roleName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("roleName", roleName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRolesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String roleCategory, String roleName, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getRoles(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getRoles(Async)");
        }
        

        com.squareup.okhttp.Call call = getRolesCall(accessKey, accessCred, at, contid, maxresults, reverse, roleCategory, roleName, callback);
        return call;

    }

    /**
     * Get character roles
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param roleCategory Role category selector (optional, default to &quot;{ any: true }&quot;)
     * @param roleName Role name selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterRole> getRoles(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String roleCategory, String roleName) throws ApiException {
        ApiResponse<List<CharacterRole>> resp = getRolesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, roleCategory, roleName);
        return resp.getData();
    }

    /**
     * Get character roles
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param roleCategory Role category selector (optional, default to &quot;{ any: true }&quot;)
     * @param roleName Role name selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterRole>> getRolesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String roleCategory, String roleName) throws ApiException {
        com.squareup.okhttp.Call call = getRolesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, roleCategory, roleName, null);
        Type localVarReturnType = new TypeToken<List<CharacterRole>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character roles (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param roleCategory Role category selector (optional, default to &quot;{ any: true }&quot;)
     * @param roleName Role name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRolesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String roleCategory, String roleName, final ApiCallback<List<CharacterRole>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getRolesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, roleCategory, roleName, callback);
        Type localVarReturnType = new TypeToken<List<CharacterRole>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getShipType
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param shipTypeID Ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipItemID Ship item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipName Ship name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getShipTypeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String shipTypeID, String shipItemID, String shipName, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/ship_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (shipTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("shipTypeID", shipTypeID));
        }

        if (shipItemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("shipItemID", shipItemID));
        }

        if (shipName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("shipName", shipName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getShipTypeValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String shipTypeID, String shipItemID, String shipName, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getShipType(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getShipType(Async)");
        }
        

        com.squareup.okhttp.Call call = getShipTypeCall(accessKey, accessCred, at, contid, maxresults, reverse, shipTypeID, shipItemID, shipName, callback);
        return call;

    }

    /**
     * Get character ship type
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param shipTypeID Ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipItemID Ship item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipName Ship name selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterShip&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterShip> getShipType(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String shipTypeID, String shipItemID, String shipName) throws ApiException {
        ApiResponse<List<CharacterShip>> resp = getShipTypeWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, shipTypeID, shipItemID, shipName);
        return resp.getData();
    }

    /**
     * Get character ship type
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param shipTypeID Ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipItemID Ship item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipName Ship name selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterShip&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterShip>> getShipTypeWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String shipTypeID, String shipItemID, String shipName) throws ApiException {
        com.squareup.okhttp.Call call = getShipTypeValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, shipTypeID, shipItemID, shipName, null);
        Type localVarReturnType = new TypeToken<List<CharacterShip>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character ship type (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param shipTypeID Ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipItemID Ship item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipName Ship name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getShipTypeAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String shipTypeID, String shipItemID, String shipName, final ApiCallback<List<CharacterShip>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getShipTypeValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, shipTypeID, shipItemID, shipName, callback);
        Type localVarReturnType = new TypeToken<List<CharacterShip>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSkillPoints
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param totalSkillPoints Total skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param unallocatedSkillPoints Unallocated skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSkillPointsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String totalSkillPoints, String unallocatedSkillPoints, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/skill_points";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (totalSkillPoints != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("totalSkillPoints", totalSkillPoints));
        }

        if (unallocatedSkillPoints != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("unallocatedSkillPoints", unallocatedSkillPoints));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSkillPointsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String totalSkillPoints, String unallocatedSkillPoints, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getSkillPoints(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getSkillPoints(Async)");
        }
        

        com.squareup.okhttp.Call call = getSkillPointsCall(accessKey, accessCred, at, contid, maxresults, reverse, totalSkillPoints, unallocatedSkillPoints, callback);
        return call;

    }

    /**
     * Get character skill points
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param totalSkillPoints Total skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param unallocatedSkillPoints Unallocated skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterSheetSkillPoints&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterSheetSkillPoints> getSkillPoints(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String totalSkillPoints, String unallocatedSkillPoints) throws ApiException {
        ApiResponse<List<CharacterSheetSkillPoints>> resp = getSkillPointsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, totalSkillPoints, unallocatedSkillPoints);
        return resp.getData();
    }

    /**
     * Get character skill points
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param totalSkillPoints Total skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param unallocatedSkillPoints Unallocated skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterSheetSkillPoints&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterSheetSkillPoints>> getSkillPointsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String totalSkillPoints, String unallocatedSkillPoints) throws ApiException {
        com.squareup.okhttp.Call call = getSkillPointsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, totalSkillPoints, unallocatedSkillPoints, null);
        Type localVarReturnType = new TypeToken<List<CharacterSheetSkillPoints>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character skill points (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param totalSkillPoints Total skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param unallocatedSkillPoints Unallocated skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSkillPointsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String totalSkillPoints, String unallocatedSkillPoints, final ApiCallback<List<CharacterSheetSkillPoints>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getSkillPointsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, totalSkillPoints, unallocatedSkillPoints, callback);
        Type localVarReturnType = new TypeToken<List<CharacterSheetSkillPoints>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSkills
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param typeID Skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param trainedSkillLevel Trained skill level selector (optional, default to &quot;{ any: true }&quot;)
     * @param skillpoints Skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param activeSkillLevel Active skill level selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSkillsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID, String trainedSkillLevel, String skillpoints, String activeSkillLevel, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/skill";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (trainedSkillLevel != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("trainedSkillLevel", trainedSkillLevel));
        }

        if (skillpoints != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("skillpoints", skillpoints));
        }

        if (activeSkillLevel != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("activeSkillLevel", activeSkillLevel));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSkillsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID, String trainedSkillLevel, String skillpoints, String activeSkillLevel, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getSkills(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getSkills(Async)");
        }
        

        com.squareup.okhttp.Call call = getSkillsCall(accessKey, accessCred, at, contid, maxresults, reverse, typeID, trainedSkillLevel, skillpoints, activeSkillLevel, callback);
        return call;

    }

    /**
     * Get character skills
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param typeID Skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param trainedSkillLevel Trained skill level selector (optional, default to &quot;{ any: true }&quot;)
     * @param skillpoints Skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param activeSkillLevel Active skill level selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterSkill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterSkill> getSkills(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID, String trainedSkillLevel, String skillpoints, String activeSkillLevel) throws ApiException {
        ApiResponse<List<CharacterSkill>> resp = getSkillsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, typeID, trainedSkillLevel, skillpoints, activeSkillLevel);
        return resp.getData();
    }

    /**
     * Get character skills
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param typeID Skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param trainedSkillLevel Trained skill level selector (optional, default to &quot;{ any: true }&quot;)
     * @param skillpoints Skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param activeSkillLevel Active skill level selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterSkill&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterSkill>> getSkillsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID, String trainedSkillLevel, String skillpoints, String activeSkillLevel) throws ApiException {
        com.squareup.okhttp.Call call = getSkillsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, typeID, trainedSkillLevel, skillpoints, activeSkillLevel, null);
        Type localVarReturnType = new TypeToken<List<CharacterSkill>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character skills (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param typeID Skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param trainedSkillLevel Trained skill level selector (optional, default to &quot;{ any: true }&quot;)
     * @param skillpoints Skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param activeSkillLevel Active skill level selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSkillsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String typeID, String trainedSkillLevel, String skillpoints, String activeSkillLevel, final ApiCallback<List<CharacterSkill>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getSkillsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, typeID, trainedSkillLevel, skillpoints, activeSkillLevel, callback);
        Type localVarReturnType = new TypeToken<List<CharacterSkill>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSkillsInQueue
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param endSP Skill ending skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param endTime Skill training end time selector (optional, default to &quot;{ any: true }&quot;)
     * @param level Skill training to level selector (optional, default to &quot;{ any: true }&quot;)
     * @param queuePosition Queue position selector (optional, default to &quot;{ any: true }&quot;)
     * @param startSP Starting skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param startTime Training start time selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param trainingStartSP Training start skill point selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSkillsInQueueCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String endSP, String endTime, String level, String queuePosition, String startSP, String startTime, String typeID, String trainingStartSP, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/skill_queue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (endSP != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endSP", endSP));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));
        }

        if (level != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("level", level));
        }

        if (queuePosition != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("queuePosition", queuePosition));
        }

        if (startSP != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startSP", startSP));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (trainingStartSP != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("trainingStartSP", trainingStartSP));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSkillsInQueueValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String endSP, String endTime, String level, String queuePosition, String startSP, String startTime, String typeID, String trainingStartSP, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getSkillsInQueue(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getSkillsInQueue(Async)");
        }
        

        com.squareup.okhttp.Call call = getSkillsInQueueCall(accessKey, accessCred, at, contid, maxresults, reverse, endSP, endTime, level, queuePosition, startSP, startTime, typeID, trainingStartSP, callback);
        return call;

    }

    /**
     * Get character skill queue
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param endSP Skill ending skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param endTime Skill training end time selector (optional, default to &quot;{ any: true }&quot;)
     * @param level Skill training to level selector (optional, default to &quot;{ any: true }&quot;)
     * @param queuePosition Queue position selector (optional, default to &quot;{ any: true }&quot;)
     * @param startSP Starting skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param startTime Training start time selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param trainingStartSP Training start skill point selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;SkillInQueue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SkillInQueue> getSkillsInQueue(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String endSP, String endTime, String level, String queuePosition, String startSP, String startTime, String typeID, String trainingStartSP) throws ApiException {
        ApiResponse<List<SkillInQueue>> resp = getSkillsInQueueWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, endSP, endTime, level, queuePosition, startSP, startTime, typeID, trainingStartSP);
        return resp.getData();
    }

    /**
     * Get character skill queue
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param endSP Skill ending skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param endTime Skill training end time selector (optional, default to &quot;{ any: true }&quot;)
     * @param level Skill training to level selector (optional, default to &quot;{ any: true }&quot;)
     * @param queuePosition Queue position selector (optional, default to &quot;{ any: true }&quot;)
     * @param startSP Starting skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param startTime Training start time selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param trainingStartSP Training start skill point selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;SkillInQueue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SkillInQueue>> getSkillsInQueueWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String endSP, String endTime, String level, String queuePosition, String startSP, String startTime, String typeID, String trainingStartSP) throws ApiException {
        com.squareup.okhttp.Call call = getSkillsInQueueValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, endSP, endTime, level, queuePosition, startSP, startTime, typeID, trainingStartSP, null);
        Type localVarReturnType = new TypeToken<List<SkillInQueue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character skill queue (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param endSP Skill ending skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param endTime Skill training end time selector (optional, default to &quot;{ any: true }&quot;)
     * @param level Skill training to level selector (optional, default to &quot;{ any: true }&quot;)
     * @param queuePosition Queue position selector (optional, default to &quot;{ any: true }&quot;)
     * @param startSP Starting skill points selector (optional, default to &quot;{ any: true }&quot;)
     * @param startTime Training start time selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Skill type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param trainingStartSP Training start skill point selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSkillsInQueueAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String endSP, String endTime, String level, String queuePosition, String startSP, String startTime, String typeID, String trainingStartSP, final ApiCallback<List<SkillInQueue>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getSkillsInQueueValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, endSP, endTime, level, queuePosition, startSP, startTime, typeID, trainingStartSP, callback);
        Type localVarReturnType = new TypeToken<List<SkillInQueue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTitles
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param titleID Character title ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param titleName Character title name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTitlesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String titleID, String titleName, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/title";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (titleID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("titleID", titleID));
        }

        if (titleName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("titleName", titleName));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTitlesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String titleID, String titleName, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getTitles(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getTitles(Async)");
        }
        

        com.squareup.okhttp.Call call = getTitlesCall(accessKey, accessCred, at, contid, maxresults, reverse, titleID, titleName, callback);
        return call;

    }

    /**
     * Get character titles
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param titleID Character title ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param titleName Character title name selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;CharacterTitle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CharacterTitle> getTitles(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String titleID, String titleName) throws ApiException {
        ApiResponse<List<CharacterTitle>> resp = getTitlesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, titleID, titleName);
        return resp.getData();
    }

    /**
     * Get character titles
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param titleID Character title ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param titleName Character title name selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;CharacterTitle&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CharacterTitle>> getTitlesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String titleID, String titleName) throws ApiException {
        com.squareup.okhttp.Call call = getTitlesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, titleID, titleName, null);
        Type localVarReturnType = new TypeToken<List<CharacterTitle>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get character titles (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param titleID Character title ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param titleName Character title name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTitlesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String titleID, String titleName, final ApiCallback<List<CharacterTitle>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getTitlesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, titleID, titleName, callback);
        Type localVarReturnType = new TypeToken<List<CharacterTitle>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUpcomingCalendarEvents
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param duration Event duration selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventDate Event date selector (milliseconds UTC) (optional, default to &quot;{ any: true }&quot;)
     * @param eventID Event ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventText Event text selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventTitle Event title selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerName Owner name selector (optional, default to &quot;{ any: true }&quot;)
     * @param response Response text selector (optional, default to &quot;{ any: true }&quot;)
     * @param importance Importance selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerType Event owner type selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUpcomingCalendarEventsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String duration, String eventDate, String eventID, String eventText, String eventTitle, String ownerID, String ownerName, String response, String importance, String ownerType, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/char/calendar_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (duration != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("duration", duration));
        }

        if (eventDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("eventDate", eventDate));
        }

        if (eventID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("eventID", eventID));
        }

        if (eventText != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("eventText", eventText));
        }

        if (eventTitle != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("eventTitle", eventTitle));
        }

        if (ownerID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ownerID", ownerID));
        }

        if (ownerName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ownerName", ownerName));
        }

        if (response != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("response", response));
        }

        if (importance != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("importance", importance));
        }

        if (ownerType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("ownerType", ownerType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUpcomingCalendarEventsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String duration, String eventDate, String eventID, String eventText, String eventTitle, String ownerID, String ownerName, String response, String importance, String ownerType, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getUpcomingCalendarEvents(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getUpcomingCalendarEvents(Async)");
        }
        

        com.squareup.okhttp.Call call = getUpcomingCalendarEventsCall(accessKey, accessCred, at, contid, maxresults, reverse, duration, eventDate, eventID, eventText, eventTitle, ownerID, ownerName, response, importance, ownerType, callback);
        return call;

    }

    /**
     * Get upcoming calendar events
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param duration Event duration selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventDate Event date selector (milliseconds UTC) (optional, default to &quot;{ any: true }&quot;)
     * @param eventID Event ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventText Event text selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventTitle Event title selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerName Owner name selector (optional, default to &quot;{ any: true }&quot;)
     * @param response Response text selector (optional, default to &quot;{ any: true }&quot;)
     * @param importance Importance selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerType Event owner type selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;UpcomingCalendarEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UpcomingCalendarEvent> getUpcomingCalendarEvents(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String duration, String eventDate, String eventID, String eventText, String eventTitle, String ownerID, String ownerName, String response, String importance, String ownerType) throws ApiException {
        ApiResponse<List<UpcomingCalendarEvent>> resp = getUpcomingCalendarEventsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, duration, eventDate, eventID, eventText, eventTitle, ownerID, ownerName, response, importance, ownerType);
        return resp.getData();
    }

    /**
     * Get upcoming calendar events
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param duration Event duration selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventDate Event date selector (milliseconds UTC) (optional, default to &quot;{ any: true }&quot;)
     * @param eventID Event ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventText Event text selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventTitle Event title selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerName Owner name selector (optional, default to &quot;{ any: true }&quot;)
     * @param response Response text selector (optional, default to &quot;{ any: true }&quot;)
     * @param importance Importance selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerType Event owner type selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;UpcomingCalendarEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UpcomingCalendarEvent>> getUpcomingCalendarEventsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String duration, String eventDate, String eventID, String eventText, String eventTitle, String ownerID, String ownerName, String response, String importance, String ownerType) throws ApiException {
        com.squareup.okhttp.Call call = getUpcomingCalendarEventsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, duration, eventDate, eventID, eventText, eventTitle, ownerID, ownerName, response, importance, ownerType, null);
        Type localVarReturnType = new TypeToken<List<UpcomingCalendarEvent>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get upcoming calendar events (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param duration Event duration selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventDate Event date selector (milliseconds UTC) (optional, default to &quot;{ any: true }&quot;)
     * @param eventID Event ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventText Event text selector (optional, default to &quot;{ any: true }&quot;)
     * @param eventTitle Event title selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerID Owner ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerName Owner name selector (optional, default to &quot;{ any: true }&quot;)
     * @param response Response text selector (optional, default to &quot;{ any: true }&quot;)
     * @param importance Importance selector (optional, default to &quot;{ any: true }&quot;)
     * @param ownerType Event owner type selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUpcomingCalendarEventsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String duration, String eventDate, String eventID, String eventText, String eventTitle, String ownerID, String ownerName, String response, String importance, String ownerType, final ApiCallback<List<UpcomingCalendarEvent>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getUpcomingCalendarEventsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, duration, eventDate, eventID, eventText, eventTitle, ownerID, ownerName, response, importance, ownerType, callback);
        Type localVarReturnType = new TypeToken<List<UpcomingCalendarEvent>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
