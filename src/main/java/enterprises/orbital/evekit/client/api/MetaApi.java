/*
 * EveKit Model API Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package enterprises.orbital.evekit.client.api;

import enterprises.orbital.evekit.client.ApiCallback;
import enterprises.orbital.evekit.client.ApiClient;
import enterprises.orbital.evekit.client.ApiException;
import enterprises.orbital.evekit.client.ApiResponse;
import enterprises.orbital.evekit.client.Configuration;
import enterprises.orbital.evekit.client.Pair;
import enterprises.orbital.evekit.client.ProgressRequestBody;
import enterprises.orbital.evekit.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import enterprises.orbital.evekit.client.model.MetaData;
import enterprises.orbital.evekit.client.model.ServiceError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetaApi {
    private ApiClient localVarApiClient;

    public MetaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getMetaDataValue
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getMetaDataValueCall(Integer accessKey, String accessCred, Long cid, String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/meta/meta/{cid}/{key}"
            .replaceAll("\\{" + "cid" + "\\}", localVarApiClient.escapeString(cid.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessCred", accessCred));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetaDataValueValidateBeforeCall(Integer accessKey, String accessCred, Long cid, String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getMetaDataValue(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getMetaDataValue(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling getMetaDataValue(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getMetaDataValue(Async)");
        }
        

        okhttp3.Call localVarCall = getMetaDataValueCall(accessKey, accessCred, cid, key, _callback);
        return localVarCall;

    }

    /**
     * Get meta data value.  A value of null indicates key was not set on this object.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @return MetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MetaData getMetaDataValue(Integer accessKey, String accessCred, Long cid, String key) throws ApiException {
        ApiResponse<MetaData> localVarResp = getMetaDataValueWithHttpInfo(accessKey, accessCred, cid, key);
        return localVarResp.getData();
    }

    /**
     * Get meta data value.  A value of null indicates key was not set on this object.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @return ApiResponse&lt;MetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MetaData> getMetaDataValueWithHttpInfo(Integer accessKey, String accessCred, Long cid, String key) throws ApiException {
        okhttp3.Call localVarCall = getMetaDataValueValidateBeforeCall(accessKey, accessCred, cid, key, null);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get meta data value.  A value of null indicates key was not set on this object. (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getMetaDataValueAsync(Integer accessKey, String accessCred, Long cid, String key, final ApiCallback<MetaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetaDataValueValidateBeforeCall(accessKey, accessCred, cid, key, _callback);
        Type localVarReturnType = new TypeToken<MetaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMetaDataValues
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getMetaDataValuesCall(Integer accessKey, String accessCred, Long cid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/meta/meta/{cid}"
            .replaceAll("\\{" + "cid" + "\\}", localVarApiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessCred", accessCred));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMetaDataValuesValidateBeforeCall(Integer accessKey, String accessCred, Long cid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getMetaDataValues(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getMetaDataValues(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling getMetaDataValues(Async)");
        }
        

        okhttp3.Call localVarCall = getMetaDataValuesCall(accessKey, accessCred, cid, _callback);
        return localVarCall;

    }

    /**
     * Get all meta data values for the given model object.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @return List&lt;MetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MetaData> getMetaDataValues(Integer accessKey, String accessCred, Long cid) throws ApiException {
        ApiResponse<List<MetaData>> localVarResp = getMetaDataValuesWithHttpInfo(accessKey, accessCred, cid);
        return localVarResp.getData();
    }

    /**
     * Get all meta data values for the given model object.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @return ApiResponse&lt;List&lt;MetaData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MetaData>> getMetaDataValuesWithHttpInfo(Integer accessKey, String accessCred, Long cid) throws ApiException {
        okhttp3.Call localVarCall = getMetaDataValuesValidateBeforeCall(accessKey, accessCred, cid, null);
        Type localVarReturnType = new TypeToken<List<MetaData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all meta data values for the given model object. (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getMetaDataValuesAsync(Integer accessKey, String accessCred, Long cid, final ApiCallback<List<MetaData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMetaDataValuesValidateBeforeCall(accessKey, accessCred, cid, _callback);
        Type localVarReturnType = new TypeToken<List<MetaData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeMetaDataValue
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call removeMetaDataValueCall(Integer accessKey, String accessCred, Long cid, String key, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/meta/meta/{cid}/{key}"
            .replaceAll("\\{" + "cid" + "\\}", localVarApiClient.escapeString(cid.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessCred", accessCred));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMetaDataValueValidateBeforeCall(Integer accessKey, String accessCred, Long cid, String key, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling removeMetaDataValue(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling removeMetaDataValue(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling removeMetaDataValue(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling removeMetaDataValue(Async)");
        }
        

        okhttp3.Call localVarCall = removeMetaDataValueCall(accessKey, accessCred, cid, key, _callback);
        return localVarCall;

    }

    /**
     * Delete meta data value.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeMetaDataValue(Integer accessKey, String accessCred, Long cid, String key) throws ApiException {
        removeMetaDataValueWithHttpInfo(accessKey, accessCred, cid, key);
    }

    /**
     * Delete meta data value.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeMetaDataValueWithHttpInfo(Integer accessKey, String accessCred, Long cid, String key) throws ApiException {
        okhttp3.Call localVarCall = removeMetaDataValueValidateBeforeCall(accessKey, accessCred, cid, key, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete meta data value. (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call removeMetaDataValueAsync(Integer accessKey, String accessCred, Long cid, String key, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMetaDataValueValidateBeforeCall(accessKey, accessCred, cid, key, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeMetaDataValues
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call removeMetaDataValuesCall(Integer accessKey, String accessCred, Long cid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/meta/meta/{cid}"
            .replaceAll("\\{" + "cid" + "\\}", localVarApiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessCred", accessCred));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeMetaDataValuesValidateBeforeCall(Integer accessKey, String accessCred, Long cid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling removeMetaDataValues(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling removeMetaDataValues(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling removeMetaDataValues(Async)");
        }
        

        okhttp3.Call localVarCall = removeMetaDataValuesCall(accessKey, accessCred, cid, _callback);
        return localVarCall;

    }

    /**
     * Delete all meta data values for the given model object.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void removeMetaDataValues(Integer accessKey, String accessCred, Long cid) throws ApiException {
        removeMetaDataValuesWithHttpInfo(accessKey, accessCred, cid);
    }

    /**
     * Delete all meta data values for the given model object.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> removeMetaDataValuesWithHttpInfo(Integer accessKey, String accessCred, Long cid) throws ApiException {
        okhttp3.Call localVarCall = removeMetaDataValuesValidateBeforeCall(accessKey, accessCred, cid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all meta data values for the given model object. (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call removeMetaDataValuesAsync(Integer accessKey, String accessCred, Long cid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeMetaDataValuesValidateBeforeCall(accessKey, accessCred, cid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setMetaDataValue
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @param value Meta-data value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call setMetaDataValueCall(Integer accessKey, String accessCred, Long cid, String key, String value, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/meta/meta/{cid}/{key}/{value}"
            .replaceAll("\\{" + "cid" + "\\}", localVarApiClient.escapeString(cid.toString()))
            .replaceAll("\\{" + "key" + "\\}", localVarApiClient.escapeString(key.toString()))
            .replaceAll("\\{" + "value" + "\\}", localVarApiClient.escapeString(value.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessCred", accessCred));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMetaDataValueValidateBeforeCall(Integer accessKey, String accessCred, Long cid, String key, String value, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling setMetaDataValue(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling setMetaDataValue(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling setMetaDataValue(Async)");
        }
        
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling setMetaDataValue(Async)");
        }
        
        // verify the required parameter 'value' is set
        if (value == null) {
            throw new ApiException("Missing the required parameter 'value' when calling setMetaDataValue(Async)");
        }
        

        okhttp3.Call localVarCall = setMetaDataValueCall(accessKey, accessCred, cid, key, value, _callback);
        return localVarCall;

    }

    /**
     * Set meta data value.  If a value already exists for this key, then it is silently over-written.  Null keys or values are not allowed.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @param value Meta-data value (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void setMetaDataValue(Integer accessKey, String accessCred, Long cid, String key, String value) throws ApiException {
        setMetaDataValueWithHttpInfo(accessKey, accessCred, cid, key, value);
    }

    /**
     * Set meta data value.  If a value already exists for this key, then it is silently over-written.  Null keys or values are not allowed.
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @param value Meta-data value (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> setMetaDataValueWithHttpInfo(Integer accessKey, String accessCred, Long cid, String key, String value) throws ApiException {
        okhttp3.Call localVarCall = setMetaDataValueValidateBeforeCall(accessKey, accessCred, cid, key, value, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set meta data value.  If a value already exists for this key, then it is silently over-written.  Null keys or values are not allowed. (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param cid Model object ID (required)
     * @param key Meta-data key (required)
     * @param value Meta-data value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call setMetaDataValueAsync(Integer accessKey, String accessCred, Long cid, String key, String value, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setMetaDataValueValidateBeforeCall(accessKey, accessCred, cid, key, value, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
