/*
 * EveKit Model API Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package enterprises.orbital.evekit.client.api;

import enterprises.orbital.evekit.client.ApiCallback;
import enterprises.orbital.evekit.client.ApiClient;
import enterprises.orbital.evekit.client.ApiException;
import enterprises.orbital.evekit.client.ApiResponse;
import enterprises.orbital.evekit.client.Configuration;
import enterprises.orbital.evekit.client.Pair;
import enterprises.orbital.evekit.client.ProgressRequestBody;
import enterprises.orbital.evekit.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import enterprises.orbital.evekit.client.model.AccountBalance;
import enterprises.orbital.evekit.client.model.Asset;
import enterprises.orbital.evekit.client.model.Blueprint;
import enterprises.orbital.evekit.client.model.Bookmark;
import enterprises.orbital.evekit.client.model.Contact;
import enterprises.orbital.evekit.client.model.ContactLabel;
import enterprises.orbital.evekit.client.model.Contract;
import enterprises.orbital.evekit.client.model.ContractBid;
import enterprises.orbital.evekit.client.model.ContractItem;
import enterprises.orbital.evekit.client.model.FacWarStats;
import enterprises.orbital.evekit.client.model.IndustryJob;
import enterprises.orbital.evekit.client.model.Kill;
import enterprises.orbital.evekit.client.model.KillAttacker;
import enterprises.orbital.evekit.client.model.KillItem;
import enterprises.orbital.evekit.client.model.KillVictim;
import enterprises.orbital.evekit.client.model.Location;
import enterprises.orbital.evekit.client.model.MarketOrder;
import enterprises.orbital.evekit.client.model.ServiceError;
import enterprises.orbital.evekit.client.model.Standing;
import enterprises.orbital.evekit.client.model.WalletJournal;
import enterprises.orbital.evekit.client.model.WalletTransaction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommonApi {
    private ApiClient apiClient;

    public CommonApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommonApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAccountBalance
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Division selector (optional, default to &quot;{ any: true }&quot;)
     * @param balance Balance selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountBalanceCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String balance, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/account_balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (division != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("division", division));
        }

        if (balance != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("balance", balance));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountBalanceValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String balance, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getAccountBalance(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getAccountBalance(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountBalanceCall(accessKey, accessCred, at, contid, maxresults, reverse, division, balance, callback);
        return call;

    }

    /**
     * Get account balance(s)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Division selector (optional, default to &quot;{ any: true }&quot;)
     * @param balance Balance selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;AccountBalance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<AccountBalance> getAccountBalance(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String balance) throws ApiException {
        ApiResponse<List<AccountBalance>> resp = getAccountBalanceWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, division, balance);
        return resp.getData();
    }

    /**
     * Get account balance(s)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Division selector (optional, default to &quot;{ any: true }&quot;)
     * @param balance Balance selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;AccountBalance&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<AccountBalance>> getAccountBalanceWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String balance) throws ApiException {
        com.squareup.okhttp.Call call = getAccountBalanceValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, division, balance, null);
        Type localVarReturnType = new TypeToken<List<AccountBalance>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account balance(s) (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Division selector (optional, default to &quot;{ any: true }&quot;)
     * @param balance Balance selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountBalanceAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String balance, final ApiCallback<List<AccountBalance>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getAccountBalanceValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, division, balance, callback);
        Type localVarReturnType = new TypeToken<List<AccountBalance>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAssets
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Asset item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Asset location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationType Asset location type selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationFlag Asset location flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Asset type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Asset quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Asset is singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintType Asset blueprint type selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintCopy Asset blueprint copy selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAssetsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationType, String locationFlag, String typeID, String quantity, String singleton, String blueprintType, String blueprintCopy, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/asset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (itemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("itemID", itemID));
        }

        if (locationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationID", locationID));
        }

        if (locationType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationType", locationType));
        }

        if (locationFlag != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationFlag", locationFlag));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        }

        if (singleton != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("singleton", singleton));
        }

        if (blueprintType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("blueprintType", blueprintType));
        }

        if (blueprintCopy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("blueprintCopy", blueprintCopy));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAssetsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationType, String locationFlag, String typeID, String quantity, String singleton, String blueprintType, String blueprintCopy, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getAssets(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getAssets(Async)");
        }
        

        com.squareup.okhttp.Call call = getAssetsCall(accessKey, accessCred, at, contid, maxresults, reverse, itemID, locationID, locationType, locationFlag, typeID, quantity, singleton, blueprintType, blueprintCopy, callback);
        return call;

    }

    /**
     * Get assets
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Asset item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Asset location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationType Asset location type selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationFlag Asset location flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Asset type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Asset quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Asset is singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintType Asset blueprint type selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintCopy Asset blueprint copy selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Asset&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Asset> getAssets(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationType, String locationFlag, String typeID, String quantity, String singleton, String blueprintType, String blueprintCopy) throws ApiException {
        ApiResponse<List<Asset>> resp = getAssetsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, itemID, locationID, locationType, locationFlag, typeID, quantity, singleton, blueprintType, blueprintCopy);
        return resp.getData();
    }

    /**
     * Get assets
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Asset item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Asset location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationType Asset location type selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationFlag Asset location flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Asset type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Asset quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Asset is singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintType Asset blueprint type selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintCopy Asset blueprint copy selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Asset&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Asset>> getAssetsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationType, String locationFlag, String typeID, String quantity, String singleton, String blueprintType, String blueprintCopy) throws ApiException {
        com.squareup.okhttp.Call call = getAssetsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, itemID, locationID, locationType, locationFlag, typeID, quantity, singleton, blueprintType, blueprintCopy, null);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get assets (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Asset item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Asset location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationType Asset location type selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationFlag Asset location flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Asset type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Asset quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Asset is singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintType Asset blueprint type selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintCopy Asset blueprint copy selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAssetsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationType, String locationFlag, String typeID, String quantity, String singleton, String blueprintType, String blueprintCopy, final ApiCallback<List<Asset>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getAssetsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, itemID, locationID, locationType, locationFlag, typeID, quantity, singleton, blueprintType, blueprintCopy, callback);
        Type localVarReturnType = new TypeToken<List<Asset>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBlueprints
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Blueprint item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Blueprint location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationFlag Blueprint location flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Blueprint type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Blueprint quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param timeEfficiency Blueprint time efficiency selector (optional, default to &quot;{ any: true }&quot;)
     * @param materialEfficiency Blueprint material efficiency selector (optional, default to &quot;{ any: true }&quot;)
     * @param runs Blueprint runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBlueprintsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationFlag, String typeID, String quantity, String timeEfficiency, String materialEfficiency, String runs, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/blueprint";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (itemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("itemID", itemID));
        }

        if (locationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationID", locationID));
        }

        if (locationFlag != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationFlag", locationFlag));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        }

        if (timeEfficiency != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("timeEfficiency", timeEfficiency));
        }

        if (materialEfficiency != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("materialEfficiency", materialEfficiency));
        }

        if (runs != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("runs", runs));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBlueprintsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationFlag, String typeID, String quantity, String timeEfficiency, String materialEfficiency, String runs, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getBlueprints(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getBlueprints(Async)");
        }
        

        com.squareup.okhttp.Call call = getBlueprintsCall(accessKey, accessCred, at, contid, maxresults, reverse, itemID, locationID, locationFlag, typeID, quantity, timeEfficiency, materialEfficiency, runs, callback);
        return call;

    }

    /**
     * Get blueprints
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Blueprint item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Blueprint location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationFlag Blueprint location flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Blueprint type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Blueprint quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param timeEfficiency Blueprint time efficiency selector (optional, default to &quot;{ any: true }&quot;)
     * @param materialEfficiency Blueprint material efficiency selector (optional, default to &quot;{ any: true }&quot;)
     * @param runs Blueprint runs selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Blueprint&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Blueprint> getBlueprints(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationFlag, String typeID, String quantity, String timeEfficiency, String materialEfficiency, String runs) throws ApiException {
        ApiResponse<List<Blueprint>> resp = getBlueprintsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, itemID, locationID, locationFlag, typeID, quantity, timeEfficiency, materialEfficiency, runs);
        return resp.getData();
    }

    /**
     * Get blueprints
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Blueprint item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Blueprint location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationFlag Blueprint location flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Blueprint type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Blueprint quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param timeEfficiency Blueprint time efficiency selector (optional, default to &quot;{ any: true }&quot;)
     * @param materialEfficiency Blueprint material efficiency selector (optional, default to &quot;{ any: true }&quot;)
     * @param runs Blueprint runs selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Blueprint&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Blueprint>> getBlueprintsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationFlag, String typeID, String quantity, String timeEfficiency, String materialEfficiency, String runs) throws ApiException {
        com.squareup.okhttp.Call call = getBlueprintsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, itemID, locationID, locationFlag, typeID, quantity, timeEfficiency, materialEfficiency, runs, null);
        Type localVarReturnType = new TypeToken<List<Blueprint>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get blueprints (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Blueprint item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Blueprint location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationFlag Blueprint location flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Blueprint type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Blueprint quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param timeEfficiency Blueprint time efficiency selector (optional, default to &quot;{ any: true }&quot;)
     * @param materialEfficiency Blueprint material efficiency selector (optional, default to &quot;{ any: true }&quot;)
     * @param runs Blueprint runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBlueprintsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String locationID, String locationFlag, String typeID, String quantity, String timeEfficiency, String materialEfficiency, String runs, final ApiCallback<List<Blueprint>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getBlueprintsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, itemID, locationID, locationFlag, typeID, quantity, timeEfficiency, materialEfficiency, runs, callback);
        Type localVarReturnType = new TypeToken<List<Blueprint>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBookmarks
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param folderID Bookmark folder ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param folderName Bookmark folder name selector (optional, default to &quot;{ any: true }&quot;)
     * @param folderCreatorID Bookmark folder creator ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bookmarkID Bookmark ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bookmarkCreatorID Bookmark creator ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param created Bookmark created selector (optional, default to &quot;{ any: true }&quot;)
     * @param itemID Bookmark item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Bookmark type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Bookmark location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Bookmark x coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Bookmark y coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Bookmark z coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param memo Bookmark memo selector (optional, default to &quot;{ any: true }&quot;)
     * @param note Bookmark note selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBookmarksCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String folderID, String folderName, String folderCreatorID, String bookmarkID, String bookmarkCreatorID, String created, String itemID, String typeID, String locationID, String x, String y, String z, String memo, String note, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/bookmark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (folderID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("folderID", folderID));
        }

        if (folderName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("folderName", folderName));
        }

        if (folderCreatorID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("folderCreatorID", folderCreatorID));
        }

        if (bookmarkID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bookmarkID", bookmarkID));
        }

        if (bookmarkCreatorID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bookmarkCreatorID", bookmarkCreatorID));
        }

        if (created != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("created", created));
        }

        if (itemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("itemID", itemID));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (locationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationID", locationID));
        }

        if (x != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("x", x));
        }

        if (y != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("y", y));
        }

        if (z != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("z", z));
        }

        if (memo != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("memo", memo));
        }

        if (note != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("note", note));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBookmarksValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String folderID, String folderName, String folderCreatorID, String bookmarkID, String bookmarkCreatorID, String created, String itemID, String typeID, String locationID, String x, String y, String z, String memo, String note, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getBookmarks(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getBookmarks(Async)");
        }
        

        com.squareup.okhttp.Call call = getBookmarksCall(accessKey, accessCred, at, contid, maxresults, reverse, folderID, folderName, folderCreatorID, bookmarkID, bookmarkCreatorID, created, itemID, typeID, locationID, x, y, z, memo, note, callback);
        return call;

    }

    /**
     * Get bookmarks
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param folderID Bookmark folder ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param folderName Bookmark folder name selector (optional, default to &quot;{ any: true }&quot;)
     * @param folderCreatorID Bookmark folder creator ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bookmarkID Bookmark ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bookmarkCreatorID Bookmark creator ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param created Bookmark created selector (optional, default to &quot;{ any: true }&quot;)
     * @param itemID Bookmark item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Bookmark type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Bookmark location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Bookmark x coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Bookmark y coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Bookmark z coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param memo Bookmark memo selector (optional, default to &quot;{ any: true }&quot;)
     * @param note Bookmark note selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Bookmark&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Bookmark> getBookmarks(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String folderID, String folderName, String folderCreatorID, String bookmarkID, String bookmarkCreatorID, String created, String itemID, String typeID, String locationID, String x, String y, String z, String memo, String note) throws ApiException {
        ApiResponse<List<Bookmark>> resp = getBookmarksWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, folderID, folderName, folderCreatorID, bookmarkID, bookmarkCreatorID, created, itemID, typeID, locationID, x, y, z, memo, note);
        return resp.getData();
    }

    /**
     * Get bookmarks
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param folderID Bookmark folder ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param folderName Bookmark folder name selector (optional, default to &quot;{ any: true }&quot;)
     * @param folderCreatorID Bookmark folder creator ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bookmarkID Bookmark ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bookmarkCreatorID Bookmark creator ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param created Bookmark created selector (optional, default to &quot;{ any: true }&quot;)
     * @param itemID Bookmark item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Bookmark type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Bookmark location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Bookmark x coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Bookmark y coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Bookmark z coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param memo Bookmark memo selector (optional, default to &quot;{ any: true }&quot;)
     * @param note Bookmark note selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Bookmark&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Bookmark>> getBookmarksWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String folderID, String folderName, String folderCreatorID, String bookmarkID, String bookmarkCreatorID, String created, String itemID, String typeID, String locationID, String x, String y, String z, String memo, String note) throws ApiException {
        com.squareup.okhttp.Call call = getBookmarksValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, folderID, folderName, folderCreatorID, bookmarkID, bookmarkCreatorID, created, itemID, typeID, locationID, x, y, z, memo, note, null);
        Type localVarReturnType = new TypeToken<List<Bookmark>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get bookmarks (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param folderID Bookmark folder ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param folderName Bookmark folder name selector (optional, default to &quot;{ any: true }&quot;)
     * @param folderCreatorID Bookmark folder creator ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bookmarkID Bookmark ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bookmarkCreatorID Bookmark creator ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param created Bookmark created selector (optional, default to &quot;{ any: true }&quot;)
     * @param itemID Bookmark item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Bookmark type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Bookmark location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Bookmark x coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Bookmark y coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Bookmark z coordinate selector (optional, default to &quot;{ any: true }&quot;)
     * @param memo Bookmark memo selector (optional, default to &quot;{ any: true }&quot;)
     * @param note Bookmark note selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBookmarksAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String folderID, String folderName, String folderCreatorID, String bookmarkID, String bookmarkCreatorID, String created, String itemID, String typeID, String locationID, String x, String y, String z, String memo, String note, final ApiCallback<List<Bookmark>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getBookmarksValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, folderID, folderName, folderCreatorID, bookmarkID, bookmarkCreatorID, created, itemID, typeID, locationID, x, y, z, memo, note, callback);
        Type localVarReturnType = new TypeToken<List<Bookmark>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContactLabels
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param list Contact list selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Contact label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Contact label name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactLabelsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String labelID, String name, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/contact_label";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (list != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("list", list));
        }

        if (labelID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("labelID", labelID));
        }

        if (name != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactLabelsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String labelID, String name, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getContactLabels(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getContactLabels(Async)");
        }
        

        com.squareup.okhttp.Call call = getContactLabelsCall(accessKey, accessCred, at, contid, maxresults, reverse, list, labelID, name, callback);
        return call;

    }

    /**
     * Get contact labels
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param list Contact list selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Contact label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Contact label name selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;ContactLabel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContactLabel> getContactLabels(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String labelID, String name) throws ApiException {
        ApiResponse<List<ContactLabel>> resp = getContactLabelsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, list, labelID, name);
        return resp.getData();
    }

    /**
     * Get contact labels
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param list Contact list selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Contact label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Contact label name selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;ContactLabel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContactLabel>> getContactLabelsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String labelID, String name) throws ApiException {
        com.squareup.okhttp.Call call = getContactLabelsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, list, labelID, name, null);
        Type localVarReturnType = new TypeToken<List<ContactLabel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contact labels (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param list Contact list selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Contact label ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param name Contact label name selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactLabelsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String labelID, String name, final ApiCallback<List<ContactLabel>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getContactLabelsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, list, labelID, name, callback);
        Type localVarReturnType = new TypeToken<List<ContactLabel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContacts
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param list Contact list selector (optional, default to &quot;{ any: true }&quot;)
     * @param contactID Contact ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param standing Contact standing selector (optional, default to &quot;{ any: true }&quot;)
     * @param contactType Contact type selector (optional, default to &quot;{ any: true }&quot;)
     * @param inWatchlist Contact in watch list selector (optional, default to &quot;{ any: true }&quot;)
     * @param isBlocked Contact is blocked selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Contact label selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContactsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String contactID, String standing, String contactType, String inWatchlist, String isBlocked, String labelID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/contact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (list != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("list", list));
        }

        if (contactID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contactID", contactID));
        }

        if (standing != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("standing", standing));
        }

        if (contactType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contactType", contactType));
        }

        if (inWatchlist != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("inWatchlist", inWatchlist));
        }

        if (isBlocked != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("isBlocked", isBlocked));
        }

        if (labelID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("labelID", labelID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContactsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String contactID, String standing, String contactType, String inWatchlist, String isBlocked, String labelID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getContacts(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getContacts(Async)");
        }
        

        com.squareup.okhttp.Call call = getContactsCall(accessKey, accessCred, at, contid, maxresults, reverse, list, contactID, standing, contactType, inWatchlist, isBlocked, labelID, callback);
        return call;

    }

    /**
     * Get contacts
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param list Contact list selector (optional, default to &quot;{ any: true }&quot;)
     * @param contactID Contact ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param standing Contact standing selector (optional, default to &quot;{ any: true }&quot;)
     * @param contactType Contact type selector (optional, default to &quot;{ any: true }&quot;)
     * @param inWatchlist Contact in watch list selector (optional, default to &quot;{ any: true }&quot;)
     * @param isBlocked Contact is blocked selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Contact label selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Contact> getContacts(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String contactID, String standing, String contactType, String inWatchlist, String isBlocked, String labelID) throws ApiException {
        ApiResponse<List<Contact>> resp = getContactsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, list, contactID, standing, contactType, inWatchlist, isBlocked, labelID);
        return resp.getData();
    }

    /**
     * Get contacts
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param list Contact list selector (optional, default to &quot;{ any: true }&quot;)
     * @param contactID Contact ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param standing Contact standing selector (optional, default to &quot;{ any: true }&quot;)
     * @param contactType Contact type selector (optional, default to &quot;{ any: true }&quot;)
     * @param inWatchlist Contact in watch list selector (optional, default to &quot;{ any: true }&quot;)
     * @param isBlocked Contact is blocked selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Contact label selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Contact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Contact>> getContactsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String contactID, String standing, String contactType, String inWatchlist, String isBlocked, String labelID) throws ApiException {
        com.squareup.okhttp.Call call = getContactsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, list, contactID, standing, contactType, inWatchlist, isBlocked, labelID, null);
        Type localVarReturnType = new TypeToken<List<Contact>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contacts (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param list Contact list selector (optional, default to &quot;{ any: true }&quot;)
     * @param contactID Contact ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param standing Contact standing selector (optional, default to &quot;{ any: true }&quot;)
     * @param contactType Contact type selector (optional, default to &quot;{ any: true }&quot;)
     * @param inWatchlist Contact in watch list selector (optional, default to &quot;{ any: true }&quot;)
     * @param isBlocked Contact is blocked selector (optional, default to &quot;{ any: true }&quot;)
     * @param labelID Contact label selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContactsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String list, String contactID, String standing, String contactType, String inWatchlist, String isBlocked, String labelID, final ApiCallback<List<Contact>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getContactsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, list, contactID, standing, contactType, inWatchlist, isBlocked, labelID, callback);
        Type localVarReturnType = new TypeToken<List<Contact>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContractBids
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param bidID Contract bid ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bidderID Contract bid bidder ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateBid Contract bid date selector (optional, default to &quot;{ any: true }&quot;)
     * @param amount Contract bid amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContractBidsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String bidID, String contractID, String bidderID, String dateBid, String amount, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/contract_bid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (bidID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bidID", bidID));
        }

        if (contractID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contractID", contractID));
        }

        if (bidderID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bidderID", bidderID));
        }

        if (dateBid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("dateBid", dateBid));
        }

        if (amount != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractBidsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String bidID, String contractID, String bidderID, String dateBid, String amount, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getContractBids(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getContractBids(Async)");
        }
        

        com.squareup.okhttp.Call call = getContractBidsCall(accessKey, accessCred, at, contid, maxresults, reverse, bidID, contractID, bidderID, dateBid, amount, callback);
        return call;

    }

    /**
     * Get contract bids
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param bidID Contract bid ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bidderID Contract bid bidder ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateBid Contract bid date selector (optional, default to &quot;{ any: true }&quot;)
     * @param amount Contract bid amount selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;ContractBid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContractBid> getContractBids(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String bidID, String contractID, String bidderID, String dateBid, String amount) throws ApiException {
        ApiResponse<List<ContractBid>> resp = getContractBidsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, bidID, contractID, bidderID, dateBid, amount);
        return resp.getData();
    }

    /**
     * Get contract bids
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param bidID Contract bid ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bidderID Contract bid bidder ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateBid Contract bid date selector (optional, default to &quot;{ any: true }&quot;)
     * @param amount Contract bid amount selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;ContractBid&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContractBid>> getContractBidsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String bidID, String contractID, String bidderID, String dateBid, String amount) throws ApiException {
        com.squareup.okhttp.Call call = getContractBidsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, bidID, contractID, bidderID, dateBid, amount, null);
        Type localVarReturnType = new TypeToken<List<ContractBid>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contract bids (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param bidID Contract bid ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param bidderID Contract bid bidder ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateBid Contract bid date selector (optional, default to &quot;{ any: true }&quot;)
     * @param amount Contract bid amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContractBidsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String bidID, String contractID, String bidderID, String dateBid, String amount, final ApiCallback<List<ContractBid>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getContractBidsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, bidID, contractID, bidderID, dateBid, amount, callback);
        Type localVarReturnType = new TypeToken<List<ContractBid>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContractItems
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param recordID Contract item record ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Contract item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Contract item quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param rawQuantity Contract item raw quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Contract item singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param included Contract item included selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContractItemsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String recordID, String typeID, String quantity, String rawQuantity, String singleton, String included, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/contract_item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (contractID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contractID", contractID));
        }

        if (recordID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("recordID", recordID));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        }

        if (rawQuantity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("rawQuantity", rawQuantity));
        }

        if (singleton != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("singleton", singleton));
        }

        if (included != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("included", included));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractItemsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String recordID, String typeID, String quantity, String rawQuantity, String singleton, String included, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getContractItems(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getContractItems(Async)");
        }
        

        com.squareup.okhttp.Call call = getContractItemsCall(accessKey, accessCred, at, contid, maxresults, reverse, contractID, recordID, typeID, quantity, rawQuantity, singleton, included, callback);
        return call;

    }

    /**
     * Get contract items
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param recordID Contract item record ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Contract item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Contract item quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param rawQuantity Contract item raw quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Contract item singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param included Contract item included selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;ContractItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ContractItem> getContractItems(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String recordID, String typeID, String quantity, String rawQuantity, String singleton, String included) throws ApiException {
        ApiResponse<List<ContractItem>> resp = getContractItemsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, contractID, recordID, typeID, quantity, rawQuantity, singleton, included);
        return resp.getData();
    }

    /**
     * Get contract items
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param recordID Contract item record ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Contract item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Contract item quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param rawQuantity Contract item raw quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Contract item singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param included Contract item included selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;ContractItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ContractItem>> getContractItemsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String recordID, String typeID, String quantity, String rawQuantity, String singleton, String included) throws ApiException {
        com.squareup.okhttp.Call call = getContractItemsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, contractID, recordID, typeID, quantity, rawQuantity, singleton, included, null);
        Type localVarReturnType = new TypeToken<List<ContractItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contract items (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param recordID Contract item record ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Contract item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Contract item quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param rawQuantity Contract item raw quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Contract item singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param included Contract item included selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContractItemsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String recordID, String typeID, String quantity, String rawQuantity, String singleton, String included, final ApiCallback<List<ContractItem>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getContractItemsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, contractID, recordID, typeID, quantity, rawQuantity, singleton, included, callback);
        Type localVarReturnType = new TypeToken<List<ContractItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getContracts
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerID Contract issuer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerCorpID Contract issuer corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param assigneeID Contract assignee ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param acceptorID Contract acceptor ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param startStationID Contract start station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param endStationID Contract end station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param type Contract type selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Contract status selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Contract title selector (optional, default to &quot;{ any: true }&quot;)
     * @param forCorp Contract for corporation selector (optional, default to &quot;{ any: true }&quot;)
     * @param availability Contract availability selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateIssued Contract date issued selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateExpired Contract date expired selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateAccepted Contract date accepted selector (optional, default to &quot;{ any: true }&quot;)
     * @param numDays Contract duration (days) selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateCompleted Contract date completed selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Contract price selector (optional, default to &quot;{ any: true }&quot;)
     * @param reward Contract reward value selector (optional, default to &quot;{ any: true }&quot;)
     * @param collateral Contract collateral value selector (optional, default to &quot;{ any: true }&quot;)
     * @param buyout Contract buyout price selector (optional, default to &quot;{ any: true }&quot;)
     * @param volume Contract volume selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getContractsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String issuerID, String issuerCorpID, String assigneeID, String acceptorID, String startStationID, String endStationID, String type, String status, String title, String forCorp, String availability, String dateIssued, String dateExpired, String dateAccepted, String numDays, String dateCompleted, String price, String reward, String collateral, String buyout, String volume, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/contract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (contractID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contractID", contractID));
        }

        if (issuerID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("issuerID", issuerID));
        }

        if (issuerCorpID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("issuerCorpID", issuerCorpID));
        }

        if (assigneeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("assigneeID", assigneeID));
        }

        if (acceptorID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("acceptorID", acceptorID));
        }

        if (startStationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startStationID", startStationID));
        }

        if (endStationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endStationID", endStationID));
        }

        if (type != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("type", type));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (title != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("title", title));
        }

        if (forCorp != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("forCorp", forCorp));
        }

        if (availability != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("availability", availability));
        }

        if (dateIssued != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("dateIssued", dateIssued));
        }

        if (dateExpired != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("dateExpired", dateExpired));
        }

        if (dateAccepted != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("dateAccepted", dateAccepted));
        }

        if (numDays != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("numDays", numDays));
        }

        if (dateCompleted != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("dateCompleted", dateCompleted));
        }

        if (price != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        }

        if (reward != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reward", reward));
        }

        if (collateral != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("collateral", collateral));
        }

        if (buyout != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("buyout", buyout));
        }

        if (volume != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("volume", volume));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getContractsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String issuerID, String issuerCorpID, String assigneeID, String acceptorID, String startStationID, String endStationID, String type, String status, String title, String forCorp, String availability, String dateIssued, String dateExpired, String dateAccepted, String numDays, String dateCompleted, String price, String reward, String collateral, String buyout, String volume, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getContracts(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getContracts(Async)");
        }
        

        com.squareup.okhttp.Call call = getContractsCall(accessKey, accessCred, at, contid, maxresults, reverse, contractID, issuerID, issuerCorpID, assigneeID, acceptorID, startStationID, endStationID, type, status, title, forCorp, availability, dateIssued, dateExpired, dateAccepted, numDays, dateCompleted, price, reward, collateral, buyout, volume, callback);
        return call;

    }

    /**
     * Get contracts
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerID Contract issuer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerCorpID Contract issuer corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param assigneeID Contract assignee ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param acceptorID Contract acceptor ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param startStationID Contract start station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param endStationID Contract end station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param type Contract type selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Contract status selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Contract title selector (optional, default to &quot;{ any: true }&quot;)
     * @param forCorp Contract for corporation selector (optional, default to &quot;{ any: true }&quot;)
     * @param availability Contract availability selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateIssued Contract date issued selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateExpired Contract date expired selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateAccepted Contract date accepted selector (optional, default to &quot;{ any: true }&quot;)
     * @param numDays Contract duration (days) selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateCompleted Contract date completed selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Contract price selector (optional, default to &quot;{ any: true }&quot;)
     * @param reward Contract reward value selector (optional, default to &quot;{ any: true }&quot;)
     * @param collateral Contract collateral value selector (optional, default to &quot;{ any: true }&quot;)
     * @param buyout Contract buyout price selector (optional, default to &quot;{ any: true }&quot;)
     * @param volume Contract volume selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Contract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Contract> getContracts(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String issuerID, String issuerCorpID, String assigneeID, String acceptorID, String startStationID, String endStationID, String type, String status, String title, String forCorp, String availability, String dateIssued, String dateExpired, String dateAccepted, String numDays, String dateCompleted, String price, String reward, String collateral, String buyout, String volume) throws ApiException {
        ApiResponse<List<Contract>> resp = getContractsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, contractID, issuerID, issuerCorpID, assigneeID, acceptorID, startStationID, endStationID, type, status, title, forCorp, availability, dateIssued, dateExpired, dateAccepted, numDays, dateCompleted, price, reward, collateral, buyout, volume);
        return resp.getData();
    }

    /**
     * Get contracts
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerID Contract issuer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerCorpID Contract issuer corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param assigneeID Contract assignee ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param acceptorID Contract acceptor ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param startStationID Contract start station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param endStationID Contract end station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param type Contract type selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Contract status selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Contract title selector (optional, default to &quot;{ any: true }&quot;)
     * @param forCorp Contract for corporation selector (optional, default to &quot;{ any: true }&quot;)
     * @param availability Contract availability selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateIssued Contract date issued selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateExpired Contract date expired selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateAccepted Contract date accepted selector (optional, default to &quot;{ any: true }&quot;)
     * @param numDays Contract duration (days) selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateCompleted Contract date completed selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Contract price selector (optional, default to &quot;{ any: true }&quot;)
     * @param reward Contract reward value selector (optional, default to &quot;{ any: true }&quot;)
     * @param collateral Contract collateral value selector (optional, default to &quot;{ any: true }&quot;)
     * @param buyout Contract buyout price selector (optional, default to &quot;{ any: true }&quot;)
     * @param volume Contract volume selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Contract&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Contract>> getContractsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String issuerID, String issuerCorpID, String assigneeID, String acceptorID, String startStationID, String endStationID, String type, String status, String title, String forCorp, String availability, String dateIssued, String dateExpired, String dateAccepted, String numDays, String dateCompleted, String price, String reward, String collateral, String buyout, String volume) throws ApiException {
        com.squareup.okhttp.Call call = getContractsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, contractID, issuerID, issuerCorpID, assigneeID, acceptorID, startStationID, endStationID, type, status, title, forCorp, availability, dateIssued, dateExpired, dateAccepted, numDays, dateCompleted, price, reward, collateral, buyout, volume, null);
        Type localVarReturnType = new TypeToken<List<Contract>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get contracts (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param contractID Contract ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerID Contract issuer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuerCorpID Contract issuer corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param assigneeID Contract assignee ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param acceptorID Contract acceptor ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param startStationID Contract start station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param endStationID Contract end station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param type Contract type selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Contract status selector (optional, default to &quot;{ any: true }&quot;)
     * @param title Contract title selector (optional, default to &quot;{ any: true }&quot;)
     * @param forCorp Contract for corporation selector (optional, default to &quot;{ any: true }&quot;)
     * @param availability Contract availability selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateIssued Contract date issued selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateExpired Contract date expired selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateAccepted Contract date accepted selector (optional, default to &quot;{ any: true }&quot;)
     * @param numDays Contract duration (days) selector (optional, default to &quot;{ any: true }&quot;)
     * @param dateCompleted Contract date completed selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Contract price selector (optional, default to &quot;{ any: true }&quot;)
     * @param reward Contract reward value selector (optional, default to &quot;{ any: true }&quot;)
     * @param collateral Contract collateral value selector (optional, default to &quot;{ any: true }&quot;)
     * @param buyout Contract buyout price selector (optional, default to &quot;{ any: true }&quot;)
     * @param volume Contract volume selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getContractsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String contractID, String issuerID, String issuerCorpID, String assigneeID, String acceptorID, String startStationID, String endStationID, String type, String status, String title, String forCorp, String availability, String dateIssued, String dateExpired, String dateAccepted, String numDays, String dateCompleted, String price, String reward, String collateral, String buyout, String volume, final ApiCallback<List<Contract>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getContractsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, contractID, issuerID, issuerCorpID, assigneeID, acceptorID, startStationID, endStationID, type, status, title, forCorp, availability, dateIssued, dateExpired, dateAccepted, numDays, dateCompleted, price, reward, collateral, buyout, volume, callback);
        Type localVarReturnType = new TypeToken<List<Contract>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFacWarStats
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param currentRank Faction war statistics current rank selector (optional, default to &quot;{ any: true }&quot;)
     * @param enlisted Faction war statistics enlisted indicator selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Faction war statistics faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param highestRank Faction war statistics highest rank selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsLastWeek Faction war statistics kill last week selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsTotal Faction war statistics total kills selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsYesterday Faction war statistics kills yesterday selector (optional, default to &quot;{ any: true }&quot;)
     * @param pilots Faction war statistics pilot count selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsLastWeek Faction war statistics victory points last week selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsTotal Faction war statistics victory points total selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsYesterday Faction war statistics victory points yesterday selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFacWarStatsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String currentRank, String enlisted, String factionID, String highestRank, String killsLastWeek, String killsTotal, String killsYesterday, String pilots, String victoryPointsLastWeek, String victoryPointsTotal, String victoryPointsYesterday, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/fac_war_stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (currentRank != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("currentRank", currentRank));
        }

        if (enlisted != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("enlisted", enlisted));
        }

        if (factionID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("factionID", factionID));
        }

        if (highestRank != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("highestRank", highestRank));
        }

        if (killsLastWeek != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killsLastWeek", killsLastWeek));
        }

        if (killsTotal != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killsTotal", killsTotal));
        }

        if (killsYesterday != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killsYesterday", killsYesterday));
        }

        if (pilots != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pilots", pilots));
        }

        if (victoryPointsLastWeek != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("victoryPointsLastWeek", victoryPointsLastWeek));
        }

        if (victoryPointsTotal != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("victoryPointsTotal", victoryPointsTotal));
        }

        if (victoryPointsYesterday != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("victoryPointsYesterday", victoryPointsYesterday));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFacWarStatsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String currentRank, String enlisted, String factionID, String highestRank, String killsLastWeek, String killsTotal, String killsYesterday, String pilots, String victoryPointsLastWeek, String victoryPointsTotal, String victoryPointsYesterday, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getFacWarStats(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getFacWarStats(Async)");
        }
        

        com.squareup.okhttp.Call call = getFacWarStatsCall(accessKey, accessCred, at, contid, maxresults, reverse, currentRank, enlisted, factionID, highestRank, killsLastWeek, killsTotal, killsYesterday, pilots, victoryPointsLastWeek, victoryPointsTotal, victoryPointsYesterday, callback);
        return call;

    }

    /**
     * Get faction war statistics
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param currentRank Faction war statistics current rank selector (optional, default to &quot;{ any: true }&quot;)
     * @param enlisted Faction war statistics enlisted indicator selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Faction war statistics faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param highestRank Faction war statistics highest rank selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsLastWeek Faction war statistics kill last week selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsTotal Faction war statistics total kills selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsYesterday Faction war statistics kills yesterday selector (optional, default to &quot;{ any: true }&quot;)
     * @param pilots Faction war statistics pilot count selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsLastWeek Faction war statistics victory points last week selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsTotal Faction war statistics victory points total selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsYesterday Faction war statistics victory points yesterday selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;FacWarStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FacWarStats> getFacWarStats(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String currentRank, String enlisted, String factionID, String highestRank, String killsLastWeek, String killsTotal, String killsYesterday, String pilots, String victoryPointsLastWeek, String victoryPointsTotal, String victoryPointsYesterday) throws ApiException {
        ApiResponse<List<FacWarStats>> resp = getFacWarStatsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, currentRank, enlisted, factionID, highestRank, killsLastWeek, killsTotal, killsYesterday, pilots, victoryPointsLastWeek, victoryPointsTotal, victoryPointsYesterday);
        return resp.getData();
    }

    /**
     * Get faction war statistics
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param currentRank Faction war statistics current rank selector (optional, default to &quot;{ any: true }&quot;)
     * @param enlisted Faction war statistics enlisted indicator selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Faction war statistics faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param highestRank Faction war statistics highest rank selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsLastWeek Faction war statistics kill last week selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsTotal Faction war statistics total kills selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsYesterday Faction war statistics kills yesterday selector (optional, default to &quot;{ any: true }&quot;)
     * @param pilots Faction war statistics pilot count selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsLastWeek Faction war statistics victory points last week selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsTotal Faction war statistics victory points total selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsYesterday Faction war statistics victory points yesterday selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;FacWarStats&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FacWarStats>> getFacWarStatsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String currentRank, String enlisted, String factionID, String highestRank, String killsLastWeek, String killsTotal, String killsYesterday, String pilots, String victoryPointsLastWeek, String victoryPointsTotal, String victoryPointsYesterday) throws ApiException {
        com.squareup.okhttp.Call call = getFacWarStatsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, currentRank, enlisted, factionID, highestRank, killsLastWeek, killsTotal, killsYesterday, pilots, victoryPointsLastWeek, victoryPointsTotal, victoryPointsYesterday, null);
        Type localVarReturnType = new TypeToken<List<FacWarStats>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get faction war statistics (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param currentRank Faction war statistics current rank selector (optional, default to &quot;{ any: true }&quot;)
     * @param enlisted Faction war statistics enlisted indicator selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Faction war statistics faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param highestRank Faction war statistics highest rank selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsLastWeek Faction war statistics kill last week selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsTotal Faction war statistics total kills selector (optional, default to &quot;{ any: true }&quot;)
     * @param killsYesterday Faction war statistics kills yesterday selector (optional, default to &quot;{ any: true }&quot;)
     * @param pilots Faction war statistics pilot count selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsLastWeek Faction war statistics victory points last week selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsTotal Faction war statistics victory points total selector (optional, default to &quot;{ any: true }&quot;)
     * @param victoryPointsYesterday Faction war statistics victory points yesterday selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFacWarStatsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String currentRank, String enlisted, String factionID, String highestRank, String killsLastWeek, String killsTotal, String killsYesterday, String pilots, String victoryPointsLastWeek, String victoryPointsTotal, String victoryPointsYesterday, final ApiCallback<List<FacWarStats>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getFacWarStatsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, currentRank, enlisted, factionID, highestRank, killsLastWeek, killsTotal, killsYesterday, pilots, victoryPointsLastWeek, victoryPointsTotal, victoryPointsYesterday, callback);
        Type localVarReturnType = new TypeToken<List<FacWarStats>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getIndustryJobs
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jobID Industry job ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param installerID Industry job installer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param facilityID Industry job facility ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Industry job station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param activityID Industry job activity ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintID Industry job blueprint ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintTypeID Industry job blueprint type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintLocationID Industry job blueprint location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param outputLocationID Industry job output location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param runs Industry job runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param cost Industry job cost selector (optional, default to &quot;{ any: true }&quot;)
     * @param licensedRuns Industry job licensed runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param probability Industry job probability selector (optional, default to &quot;{ any: true }&quot;)
     * @param productTypeID Industry job product type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Industry job status selector (optional, default to &quot;{ any: true }&quot;)
     * @param timeInSeconds Industry job time in seconds selector (optional, default to &quot;{ any: true }&quot;)
     * @param startDate Industry job start date selector (optional, default to &quot;{ any: true }&quot;)
     * @param endDate Industry job end date selector (optional, default to &quot;{ any: true }&quot;)
     * @param pauseDate Industry job pause date selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedDate Industry job completed date selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedCharacterID Industry job completed character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param successfulRuns Industry job successful runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getIndustryJobsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jobID, String installerID, String facilityID, String stationID, String activityID, String blueprintID, String blueprintTypeID, String blueprintLocationID, String outputLocationID, String runs, String cost, String licensedRuns, String probability, String productTypeID, String status, String timeInSeconds, String startDate, String endDate, String pauseDate, String completedDate, String completedCharacterID, String successfulRuns, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/industry_job";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (jobID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("jobID", jobID));
        }

        if (installerID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("installerID", installerID));
        }

        if (facilityID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("facilityID", facilityID));
        }

        if (stationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("stationID", stationID));
        }

        if (activityID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("activityID", activityID));
        }

        if (blueprintID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("blueprintID", blueprintID));
        }

        if (blueprintTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("blueprintTypeID", blueprintTypeID));
        }

        if (blueprintLocationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("blueprintLocationID", blueprintLocationID));
        }

        if (outputLocationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("outputLocationID", outputLocationID));
        }

        if (runs != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("runs", runs));
        }

        if (cost != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("cost", cost));
        }

        if (licensedRuns != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("licensedRuns", licensedRuns));
        }

        if (probability != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("probability", probability));
        }

        if (productTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("productTypeID", productTypeID));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (timeInSeconds != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("timeInSeconds", timeInSeconds));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        }

        if (pauseDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("pauseDate", pauseDate));
        }

        if (completedDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("completedDate", completedDate));
        }

        if (completedCharacterID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("completedCharacterID", completedCharacterID));
        }

        if (successfulRuns != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("successfulRuns", successfulRuns));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getIndustryJobsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jobID, String installerID, String facilityID, String stationID, String activityID, String blueprintID, String blueprintTypeID, String blueprintLocationID, String outputLocationID, String runs, String cost, String licensedRuns, String probability, String productTypeID, String status, String timeInSeconds, String startDate, String endDate, String pauseDate, String completedDate, String completedCharacterID, String successfulRuns, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getIndustryJobs(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getIndustryJobs(Async)");
        }
        

        com.squareup.okhttp.Call call = getIndustryJobsCall(accessKey, accessCred, at, contid, maxresults, reverse, jobID, installerID, facilityID, stationID, activityID, blueprintID, blueprintTypeID, blueprintLocationID, outputLocationID, runs, cost, licensedRuns, probability, productTypeID, status, timeInSeconds, startDate, endDate, pauseDate, completedDate, completedCharacterID, successfulRuns, callback);
        return call;

    }

    /**
     * Get industry jobs
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jobID Industry job ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param installerID Industry job installer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param facilityID Industry job facility ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Industry job station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param activityID Industry job activity ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintID Industry job blueprint ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintTypeID Industry job blueprint type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintLocationID Industry job blueprint location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param outputLocationID Industry job output location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param runs Industry job runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param cost Industry job cost selector (optional, default to &quot;{ any: true }&quot;)
     * @param licensedRuns Industry job licensed runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param probability Industry job probability selector (optional, default to &quot;{ any: true }&quot;)
     * @param productTypeID Industry job product type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Industry job status selector (optional, default to &quot;{ any: true }&quot;)
     * @param timeInSeconds Industry job time in seconds selector (optional, default to &quot;{ any: true }&quot;)
     * @param startDate Industry job start date selector (optional, default to &quot;{ any: true }&quot;)
     * @param endDate Industry job end date selector (optional, default to &quot;{ any: true }&quot;)
     * @param pauseDate Industry job pause date selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedDate Industry job completed date selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedCharacterID Industry job completed character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param successfulRuns Industry job successful runs selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;IndustryJob&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IndustryJob> getIndustryJobs(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jobID, String installerID, String facilityID, String stationID, String activityID, String blueprintID, String blueprintTypeID, String blueprintLocationID, String outputLocationID, String runs, String cost, String licensedRuns, String probability, String productTypeID, String status, String timeInSeconds, String startDate, String endDate, String pauseDate, String completedDate, String completedCharacterID, String successfulRuns) throws ApiException {
        ApiResponse<List<IndustryJob>> resp = getIndustryJobsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, jobID, installerID, facilityID, stationID, activityID, blueprintID, blueprintTypeID, blueprintLocationID, outputLocationID, runs, cost, licensedRuns, probability, productTypeID, status, timeInSeconds, startDate, endDate, pauseDate, completedDate, completedCharacterID, successfulRuns);
        return resp.getData();
    }

    /**
     * Get industry jobs
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jobID Industry job ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param installerID Industry job installer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param facilityID Industry job facility ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Industry job station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param activityID Industry job activity ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintID Industry job blueprint ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintTypeID Industry job blueprint type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintLocationID Industry job blueprint location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param outputLocationID Industry job output location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param runs Industry job runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param cost Industry job cost selector (optional, default to &quot;{ any: true }&quot;)
     * @param licensedRuns Industry job licensed runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param probability Industry job probability selector (optional, default to &quot;{ any: true }&quot;)
     * @param productTypeID Industry job product type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Industry job status selector (optional, default to &quot;{ any: true }&quot;)
     * @param timeInSeconds Industry job time in seconds selector (optional, default to &quot;{ any: true }&quot;)
     * @param startDate Industry job start date selector (optional, default to &quot;{ any: true }&quot;)
     * @param endDate Industry job end date selector (optional, default to &quot;{ any: true }&quot;)
     * @param pauseDate Industry job pause date selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedDate Industry job completed date selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedCharacterID Industry job completed character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param successfulRuns Industry job successful runs selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;IndustryJob&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IndustryJob>> getIndustryJobsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jobID, String installerID, String facilityID, String stationID, String activityID, String blueprintID, String blueprintTypeID, String blueprintLocationID, String outputLocationID, String runs, String cost, String licensedRuns, String probability, String productTypeID, String status, String timeInSeconds, String startDate, String endDate, String pauseDate, String completedDate, String completedCharacterID, String successfulRuns) throws ApiException {
        com.squareup.okhttp.Call call = getIndustryJobsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, jobID, installerID, facilityID, stationID, activityID, blueprintID, blueprintTypeID, blueprintLocationID, outputLocationID, runs, cost, licensedRuns, probability, productTypeID, status, timeInSeconds, startDate, endDate, pauseDate, completedDate, completedCharacterID, successfulRuns, null);
        Type localVarReturnType = new TypeToken<List<IndustryJob>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get industry jobs (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param jobID Industry job ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param installerID Industry job installer ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param facilityID Industry job facility ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param stationID Industry job station ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param activityID Industry job activity ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintID Industry job blueprint ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintTypeID Industry job blueprint type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param blueprintLocationID Industry job blueprint location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param outputLocationID Industry job output location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param runs Industry job runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param cost Industry job cost selector (optional, default to &quot;{ any: true }&quot;)
     * @param licensedRuns Industry job licensed runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param probability Industry job probability selector (optional, default to &quot;{ any: true }&quot;)
     * @param productTypeID Industry job product type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param status Industry job status selector (optional, default to &quot;{ any: true }&quot;)
     * @param timeInSeconds Industry job time in seconds selector (optional, default to &quot;{ any: true }&quot;)
     * @param startDate Industry job start date selector (optional, default to &quot;{ any: true }&quot;)
     * @param endDate Industry job end date selector (optional, default to &quot;{ any: true }&quot;)
     * @param pauseDate Industry job pause date selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedDate Industry job completed date selector (optional, default to &quot;{ any: true }&quot;)
     * @param completedCharacterID Industry job completed character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param successfulRuns Industry job successful runs selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getIndustryJobsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String jobID, String installerID, String facilityID, String stationID, String activityID, String blueprintID, String blueprintTypeID, String blueprintLocationID, String outputLocationID, String runs, String cost, String licensedRuns, String probability, String productTypeID, String status, String timeInSeconds, String startDate, String endDate, String pauseDate, String completedDate, String completedCharacterID, String successfulRuns, final ApiCallback<List<IndustryJob>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getIndustryJobsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, jobID, installerID, facilityID, stationID, activityID, blueprintID, blueprintTypeID, blueprintLocationID, outputLocationID, runs, cost, licensedRuns, probability, productTypeID, status, timeInSeconds, startDate, endDate, pauseDate, completedDate, completedCharacterID, successfulRuns, callback);
        Type localVarReturnType = new TypeToken<List<IndustryJob>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getJournalEntries
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Wallet journal division selector (optional, default to &quot;{ any: true }&quot;)
     * @param refID Journal entry ref ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param date Journal entry date selector (optional, default to &quot;{ any: true }&quot;)
     * @param refType Journal entry ref type selector (optional, default to &quot;{ any: true }&quot;)
     * @param firstPartyID Journal entry first party ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param secondPartyID Journal entry second party ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param argName1 Journal entry argument name selector (optional, default to &quot;{ any: true }&quot;)
     * @param argID1 Journal entry argument ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param amount Journal entry amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param balance Journal entry balance selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Journal entry reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param taxReceiverID Journal entry tax receiver ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param taxAmount Journal entry tax amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param contextID Context ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contextType Context type selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Description selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getJournalEntriesCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String refID, String date, String refType, String firstPartyID, String secondPartyID, String argName1, String argID1, String amount, String balance, String reason, String taxReceiverID, String taxAmount, String contextID, String contextType, String description, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/wallet_journal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (division != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("division", division));
        }

        if (refID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("refID", refID));
        }

        if (date != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        }

        if (refType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("refType", refType));
        }

        if (firstPartyID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("firstPartyID", firstPartyID));
        }

        if (secondPartyID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("secondPartyID", secondPartyID));
        }

        if (argName1 != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("argName1", argName1));
        }

        if (argID1 != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("argID1", argID1));
        }

        if (amount != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        }

        if (balance != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("balance", balance));
        }

        if (reason != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reason", reason));
        }

        if (taxReceiverID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("taxReceiverID", taxReceiverID));
        }

        if (taxAmount != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("taxAmount", taxAmount));
        }

        if (contextID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contextID", contextID));
        }

        if (contextType != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contextType", contextType));
        }

        if (description != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("description", description));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getJournalEntriesValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String refID, String date, String refType, String firstPartyID, String secondPartyID, String argName1, String argID1, String amount, String balance, String reason, String taxReceiverID, String taxAmount, String contextID, String contextType, String description, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getJournalEntries(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getJournalEntries(Async)");
        }
        

        com.squareup.okhttp.Call call = getJournalEntriesCall(accessKey, accessCred, at, contid, maxresults, reverse, division, refID, date, refType, firstPartyID, secondPartyID, argName1, argID1, amount, balance, reason, taxReceiverID, taxAmount, contextID, contextType, description, callback);
        return call;

    }

    /**
     * Get wallet journal entries
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Wallet journal division selector (optional, default to &quot;{ any: true }&quot;)
     * @param refID Journal entry ref ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param date Journal entry date selector (optional, default to &quot;{ any: true }&quot;)
     * @param refType Journal entry ref type selector (optional, default to &quot;{ any: true }&quot;)
     * @param firstPartyID Journal entry first party ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param secondPartyID Journal entry second party ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param argName1 Journal entry argument name selector (optional, default to &quot;{ any: true }&quot;)
     * @param argID1 Journal entry argument ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param amount Journal entry amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param balance Journal entry balance selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Journal entry reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param taxReceiverID Journal entry tax receiver ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param taxAmount Journal entry tax amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param contextID Context ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contextType Context type selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Description selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;WalletJournal&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WalletJournal> getJournalEntries(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String refID, String date, String refType, String firstPartyID, String secondPartyID, String argName1, String argID1, String amount, String balance, String reason, String taxReceiverID, String taxAmount, String contextID, String contextType, String description) throws ApiException {
        ApiResponse<List<WalletJournal>> resp = getJournalEntriesWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, division, refID, date, refType, firstPartyID, secondPartyID, argName1, argID1, amount, balance, reason, taxReceiverID, taxAmount, contextID, contextType, description);
        return resp.getData();
    }

    /**
     * Get wallet journal entries
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Wallet journal division selector (optional, default to &quot;{ any: true }&quot;)
     * @param refID Journal entry ref ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param date Journal entry date selector (optional, default to &quot;{ any: true }&quot;)
     * @param refType Journal entry ref type selector (optional, default to &quot;{ any: true }&quot;)
     * @param firstPartyID Journal entry first party ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param secondPartyID Journal entry second party ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param argName1 Journal entry argument name selector (optional, default to &quot;{ any: true }&quot;)
     * @param argID1 Journal entry argument ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param amount Journal entry amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param balance Journal entry balance selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Journal entry reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param taxReceiverID Journal entry tax receiver ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param taxAmount Journal entry tax amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param contextID Context ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contextType Context type selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Description selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;WalletJournal&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WalletJournal>> getJournalEntriesWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String refID, String date, String refType, String firstPartyID, String secondPartyID, String argName1, String argID1, String amount, String balance, String reason, String taxReceiverID, String taxAmount, String contextID, String contextType, String description) throws ApiException {
        com.squareup.okhttp.Call call = getJournalEntriesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, division, refID, date, refType, firstPartyID, secondPartyID, argName1, argID1, amount, balance, reason, taxReceiverID, taxAmount, contextID, contextType, description, null);
        Type localVarReturnType = new TypeToken<List<WalletJournal>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get wallet journal entries (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Wallet journal division selector (optional, default to &quot;{ any: true }&quot;)
     * @param refID Journal entry ref ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param date Journal entry date selector (optional, default to &quot;{ any: true }&quot;)
     * @param refType Journal entry ref type selector (optional, default to &quot;{ any: true }&quot;)
     * @param firstPartyID Journal entry first party ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param secondPartyID Journal entry second party ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param argName1 Journal entry argument name selector (optional, default to &quot;{ any: true }&quot;)
     * @param argID1 Journal entry argument ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param amount Journal entry amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param balance Journal entry balance selector (optional, default to &quot;{ any: true }&quot;)
     * @param reason Journal entry reason selector (optional, default to &quot;{ any: true }&quot;)
     * @param taxReceiverID Journal entry tax receiver ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param taxAmount Journal entry tax amount selector (optional, default to &quot;{ any: true }&quot;)
     * @param contextID Context ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param contextType Context type selector (optional, default to &quot;{ any: true }&quot;)
     * @param description Description selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getJournalEntriesAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String refID, String date, String refType, String firstPartyID, String secondPartyID, String argName1, String argID1, String amount, String balance, String reason, String taxReceiverID, String taxAmount, String contextID, String contextType, String description, final ApiCallback<List<WalletJournal>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getJournalEntriesValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, division, refID, date, refType, firstPartyID, secondPartyID, argName1, argID1, amount, balance, reason, taxReceiverID, taxAmount, contextID, contextType, description, callback);
        Type localVarReturnType = new TypeToken<List<WalletJournal>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKillAttackers
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param attackerCharacterID Kill attacker character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Kill attacker alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param attackerCorporationID Kill attacker corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param damageDone Kill attacker damage done selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Kill attacker faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param securityStatus Kill attacker security status selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Kill attacker ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param weaponTypeID Kill attacker weapon type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param finalBlow Kill attacker final blow selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKillAttackersCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String attackerCharacterID, String allianceID, String attackerCorporationID, String damageDone, String factionID, String securityStatus, String shipTypeID, String weaponTypeID, String finalBlow, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/kill_attacker";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (killID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killID", killID));
        }

        if (attackerCharacterID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("attackerCharacterID", attackerCharacterID));
        }

        if (allianceID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("allianceID", allianceID));
        }

        if (attackerCorporationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("attackerCorporationID", attackerCorporationID));
        }

        if (damageDone != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("damageDone", damageDone));
        }

        if (factionID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("factionID", factionID));
        }

        if (securityStatus != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("securityStatus", securityStatus));
        }

        if (shipTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("shipTypeID", shipTypeID));
        }

        if (weaponTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("weaponTypeID", weaponTypeID));
        }

        if (finalBlow != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("finalBlow", finalBlow));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKillAttackersValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String attackerCharacterID, String allianceID, String attackerCorporationID, String damageDone, String factionID, String securityStatus, String shipTypeID, String weaponTypeID, String finalBlow, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getKillAttackers(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getKillAttackers(Async)");
        }
        

        com.squareup.okhttp.Call call = getKillAttackersCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, attackerCharacterID, allianceID, attackerCorporationID, damageDone, factionID, securityStatus, shipTypeID, weaponTypeID, finalBlow, callback);
        return call;

    }

    /**
     * Get kill attackers
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param attackerCharacterID Kill attacker character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Kill attacker alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param attackerCorporationID Kill attacker corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param damageDone Kill attacker damage done selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Kill attacker faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param securityStatus Kill attacker security status selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Kill attacker ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param weaponTypeID Kill attacker weapon type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param finalBlow Kill attacker final blow selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;KillAttacker&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<KillAttacker> getKillAttackers(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String attackerCharacterID, String allianceID, String attackerCorporationID, String damageDone, String factionID, String securityStatus, String shipTypeID, String weaponTypeID, String finalBlow) throws ApiException {
        ApiResponse<List<KillAttacker>> resp = getKillAttackersWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, killID, attackerCharacterID, allianceID, attackerCorporationID, damageDone, factionID, securityStatus, shipTypeID, weaponTypeID, finalBlow);
        return resp.getData();
    }

    /**
     * Get kill attackers
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param attackerCharacterID Kill attacker character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Kill attacker alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param attackerCorporationID Kill attacker corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param damageDone Kill attacker damage done selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Kill attacker faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param securityStatus Kill attacker security status selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Kill attacker ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param weaponTypeID Kill attacker weapon type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param finalBlow Kill attacker final blow selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;KillAttacker&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<KillAttacker>> getKillAttackersWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String attackerCharacterID, String allianceID, String attackerCorporationID, String damageDone, String factionID, String securityStatus, String shipTypeID, String weaponTypeID, String finalBlow) throws ApiException {
        com.squareup.okhttp.Call call = getKillAttackersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, attackerCharacterID, allianceID, attackerCorporationID, damageDone, factionID, securityStatus, shipTypeID, weaponTypeID, finalBlow, null);
        Type localVarReturnType = new TypeToken<List<KillAttacker>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get kill attackers (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param attackerCharacterID Kill attacker character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Kill attacker alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param attackerCorporationID Kill attacker corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param damageDone Kill attacker damage done selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Kill attacker faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param securityStatus Kill attacker security status selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Kill attacker ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param weaponTypeID Kill attacker weapon type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param finalBlow Kill attacker final blow selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKillAttackersAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String attackerCharacterID, String allianceID, String attackerCorporationID, String damageDone, String factionID, String securityStatus, String shipTypeID, String weaponTypeID, String finalBlow, final ApiCallback<List<KillAttacker>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getKillAttackersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, attackerCharacterID, allianceID, attackerCorporationID, damageDone, factionID, securityStatus, shipTypeID, weaponTypeID, finalBlow, callback);
        Type localVarReturnType = new TypeToken<List<KillAttacker>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKillItems
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Kill item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param flag Kill item flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param qtyDestroyed Kill item quantity destroyed selector (optional, default to &quot;{ any: true }&quot;)
     * @param qtyDropped Kill item quantity dropped selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Kill item singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param sequence Kill item sequence selector (optional, default to &quot;{ any: true }&quot;)
     * @param containerSequence Kill item container sequence selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKillItemsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String typeID, String flag, String qtyDestroyed, String qtyDropped, String singleton, String sequence, String containerSequence, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/kill_item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (killID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killID", killID));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (flag != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("flag", flag));
        }

        if (qtyDestroyed != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("qtyDestroyed", qtyDestroyed));
        }

        if (qtyDropped != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("qtyDropped", qtyDropped));
        }

        if (singleton != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("singleton", singleton));
        }

        if (sequence != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sequence", sequence));
        }

        if (containerSequence != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("containerSequence", containerSequence));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKillItemsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String typeID, String flag, String qtyDestroyed, String qtyDropped, String singleton, String sequence, String containerSequence, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getKillItems(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getKillItems(Async)");
        }
        

        com.squareup.okhttp.Call call = getKillItemsCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, typeID, flag, qtyDestroyed, qtyDropped, singleton, sequence, containerSequence, callback);
        return call;

    }

    /**
     * Get kill items
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Kill item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param flag Kill item flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param qtyDestroyed Kill item quantity destroyed selector (optional, default to &quot;{ any: true }&quot;)
     * @param qtyDropped Kill item quantity dropped selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Kill item singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param sequence Kill item sequence selector (optional, default to &quot;{ any: true }&quot;)
     * @param containerSequence Kill item container sequence selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;KillItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<KillItem> getKillItems(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String typeID, String flag, String qtyDestroyed, String qtyDropped, String singleton, String sequence, String containerSequence) throws ApiException {
        ApiResponse<List<KillItem>> resp = getKillItemsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, killID, typeID, flag, qtyDestroyed, qtyDropped, singleton, sequence, containerSequence);
        return resp.getData();
    }

    /**
     * Get kill items
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Kill item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param flag Kill item flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param qtyDestroyed Kill item quantity destroyed selector (optional, default to &quot;{ any: true }&quot;)
     * @param qtyDropped Kill item quantity dropped selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Kill item singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param sequence Kill item sequence selector (optional, default to &quot;{ any: true }&quot;)
     * @param containerSequence Kill item container sequence selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;KillItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<KillItem>> getKillItemsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String typeID, String flag, String qtyDestroyed, String qtyDropped, String singleton, String sequence, String containerSequence) throws ApiException {
        com.squareup.okhttp.Call call = getKillItemsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, typeID, flag, qtyDestroyed, qtyDropped, singleton, sequence, containerSequence, null);
        Type localVarReturnType = new TypeToken<List<KillItem>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get kill items (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Kill item type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param flag Kill item flag selector (optional, default to &quot;{ any: true }&quot;)
     * @param qtyDestroyed Kill item quantity destroyed selector (optional, default to &quot;{ any: true }&quot;)
     * @param qtyDropped Kill item quantity dropped selector (optional, default to &quot;{ any: true }&quot;)
     * @param singleton Kill item singleton selector (optional, default to &quot;{ any: true }&quot;)
     * @param sequence Kill item sequence selector (optional, default to &quot;{ any: true }&quot;)
     * @param containerSequence Kill item container sequence selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKillItemsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String typeID, String flag, String qtyDestroyed, String qtyDropped, String singleton, String sequence, String containerSequence, final ApiCallback<List<KillItem>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getKillItemsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, typeID, flag, qtyDestroyed, qtyDropped, singleton, sequence, containerSequence, callback);
        Type localVarReturnType = new TypeToken<List<KillItem>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKillVictims
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Kill victim alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killCharacterID Kill victim character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killCorporationID Kill victim corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param damageTaken Kill victim damage taken selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Kill victim faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Kill victim ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Kill X position selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Kill Y position selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Kill Z position selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKillVictimsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String allianceID, String killCharacterID, String killCorporationID, String damageTaken, String factionID, String shipTypeID, String x, String y, String z, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/kill_victim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (killID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killID", killID));
        }

        if (allianceID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("allianceID", allianceID));
        }

        if (killCharacterID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killCharacterID", killCharacterID));
        }

        if (killCorporationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killCorporationID", killCorporationID));
        }

        if (damageTaken != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("damageTaken", damageTaken));
        }

        if (factionID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("factionID", factionID));
        }

        if (shipTypeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("shipTypeID", shipTypeID));
        }

        if (x != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("x", x));
        }

        if (y != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("y", y));
        }

        if (z != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("z", z));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKillVictimsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String allianceID, String killCharacterID, String killCorporationID, String damageTaken, String factionID, String shipTypeID, String x, String y, String z, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getKillVictims(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getKillVictims(Async)");
        }
        

        com.squareup.okhttp.Call call = getKillVictimsCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, allianceID, killCharacterID, killCorporationID, damageTaken, factionID, shipTypeID, x, y, z, callback);
        return call;

    }

    /**
     * Get kill victims
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Kill victim alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killCharacterID Kill victim character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killCorporationID Kill victim corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param damageTaken Kill victim damage taken selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Kill victim faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Kill victim ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Kill X position selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Kill Y position selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Kill Z position selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;KillVictim&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<KillVictim> getKillVictims(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String allianceID, String killCharacterID, String killCorporationID, String damageTaken, String factionID, String shipTypeID, String x, String y, String z) throws ApiException {
        ApiResponse<List<KillVictim>> resp = getKillVictimsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, killID, allianceID, killCharacterID, killCorporationID, damageTaken, factionID, shipTypeID, x, y, z);
        return resp.getData();
    }

    /**
     * Get kill victims
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Kill victim alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killCharacterID Kill victim character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killCorporationID Kill victim corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param damageTaken Kill victim damage taken selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Kill victim faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Kill victim ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Kill X position selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Kill Y position selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Kill Z position selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;KillVictim&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<KillVictim>> getKillVictimsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String allianceID, String killCharacterID, String killCorporationID, String damageTaken, String factionID, String shipTypeID, String x, String y, String z) throws ApiException {
        com.squareup.okhttp.Call call = getKillVictimsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, allianceID, killCharacterID, killCorporationID, damageTaken, factionID, shipTypeID, x, y, z, null);
        Type localVarReturnType = new TypeToken<List<KillVictim>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get kill victims (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param allianceID Kill victim alliance ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killCharacterID Kill victim character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killCorporationID Kill victim corporation ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param damageTaken Kill victim damage taken selector (optional, default to &quot;{ any: true }&quot;)
     * @param factionID Kill victim faction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param shipTypeID Kill victim ship type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Kill X position selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Kill Y position selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Kill Z position selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKillVictimsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String allianceID, String killCharacterID, String killCorporationID, String damageTaken, String factionID, String shipTypeID, String x, String y, String z, final ApiCallback<List<KillVictim>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getKillVictimsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, allianceID, killCharacterID, killCorporationID, damageTaken, factionID, shipTypeID, x, y, z, callback);
        Type localVarReturnType = new TypeToken<List<KillVictim>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getKills
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killTime Kill time selector (optional, default to &quot;{ any: true }&quot;)
     * @param moonID Kill moon ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Kill solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param warID War ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getKillsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String killTime, String moonID, String solarSystemID, String warID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/kill";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (killID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killID", killID));
        }

        if (killTime != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("killTime", killTime));
        }

        if (moonID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("moonID", moonID));
        }

        if (solarSystemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("solarSystemID", solarSystemID));
        }

        if (warID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("warID", warID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getKillsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String killTime, String moonID, String solarSystemID, String warID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getKills(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getKills(Async)");
        }
        

        com.squareup.okhttp.Call call = getKillsCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, killTime, moonID, solarSystemID, warID, callback);
        return call;

    }

    /**
     * Get kills
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killTime Kill time selector (optional, default to &quot;{ any: true }&quot;)
     * @param moonID Kill moon ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Kill solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param warID War ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Kill&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Kill> getKills(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String killTime, String moonID, String solarSystemID, String warID) throws ApiException {
        ApiResponse<List<Kill>> resp = getKillsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, killID, killTime, moonID, solarSystemID, warID);
        return resp.getData();
    }

    /**
     * Get kills
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killTime Kill time selector (optional, default to &quot;{ any: true }&quot;)
     * @param moonID Kill moon ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Kill solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param warID War ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Kill&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Kill>> getKillsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String killTime, String moonID, String solarSystemID, String warID) throws ApiException {
        com.squareup.okhttp.Call call = getKillsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, killTime, moonID, solarSystemID, warID, null);
        Type localVarReturnType = new TypeToken<List<Kill>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get kills (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param killID Kill ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param killTime Kill time selector (optional, default to &quot;{ any: true }&quot;)
     * @param moonID Kill moon ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param solarSystemID Kill solar system ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param warID War ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getKillsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String killID, String killTime, String moonID, String solarSystemID, String warID, final ApiCallback<List<Kill>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getKillsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, killID, killTime, moonID, solarSystemID, warID, callback);
        Type localVarReturnType = new TypeToken<List<Kill>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLocations
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Location item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param itemName Location item name selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Location X position selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Location Y position selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Location Z position selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLocationsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String itemName, String x, String y, String z, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/location";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (itemID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("itemID", itemID));
        }

        if (itemName != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("itemName", itemName));
        }

        if (x != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("x", x));
        }

        if (y != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("y", y));
        }

        if (z != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("z", z));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLocationsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String itemName, String x, String y, String z, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getLocations(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getLocations(Async)");
        }
        

        com.squareup.okhttp.Call call = getLocationsCall(accessKey, accessCred, at, contid, maxresults, reverse, itemID, itemName, x, y, z, callback);
        return call;

    }

    /**
     * Get locations
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Location item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param itemName Location item name selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Location X position selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Location Y position selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Location Z position selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Location> getLocations(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String itemName, String x, String y, String z) throws ApiException {
        ApiResponse<List<Location>> resp = getLocationsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, itemID, itemName, x, y, z);
        return resp.getData();
    }

    /**
     * Get locations
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Location item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param itemName Location item name selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Location X position selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Location Y position selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Location Z position selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Location&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Location>> getLocationsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String itemName, String x, String y, String z) throws ApiException {
        com.squareup.okhttp.Call call = getLocationsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, itemID, itemName, x, y, z, null);
        Type localVarReturnType = new TypeToken<List<Location>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get locations (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param itemID Location item ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param itemName Location item name selector (optional, default to &quot;{ any: true }&quot;)
     * @param x Location X position selector (optional, default to &quot;{ any: true }&quot;)
     * @param y Location Y position selector (optional, default to &quot;{ any: true }&quot;)
     * @param z Location Z position selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLocationsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String itemID, String itemName, String x, String y, String z, final ApiCallback<List<Location>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getLocationsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, itemID, itemName, x, y, z, callback);
        Type localVarReturnType = new TypeToken<List<Location>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMarketOrders
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param orderID Market order ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param walletDivision Market order wallet division selector (optional, default to &quot;{ any: true }&quot;)
     * @param bid Market order bid indicator selector (optional, default to &quot;{ any: true }&quot;)
     * @param charID Market order character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param duration Market order duration selector (optional, default to &quot;{ any: true }&quot;)
     * @param escrow Market order escrow selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Market order issue date selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuedBy Market order issued by selector (optional, default to &quot;{ any: true }&quot;)
     * @param minVolume Market order min volume selector (optional, default to &quot;{ any: true }&quot;)
     * @param orderState Market order state selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Market order price selector (optional, default to &quot;{ any: true }&quot;)
     * @param orderRange Market order range selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Market order type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param volEntered Market order volume entered selector (optional, default to &quot;{ any: true }&quot;)
     * @param volRemaining Market order volume remaining selector (optional, default to &quot;{ any: true }&quot;)
     * @param regionID Market order region ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Market order location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isCorp Market order is corporation selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMarketOrdersCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String orderID, String walletDivision, String bid, String charID, String duration, String escrow, String issued, String issuedBy, String minVolume, String orderState, String price, String orderRange, String typeID, String volEntered, String volRemaining, String regionID, String locationID, String isCorp, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/market_order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (orderID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("orderID", orderID));
        }

        if (walletDivision != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("walletDivision", walletDivision));
        }

        if (bid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bid", bid));
        }

        if (charID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("charID", charID));
        }

        if (duration != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("duration", duration));
        }

        if (escrow != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("escrow", escrow));
        }

        if (issued != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("issued", issued));
        }

        if (issuedBy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("issuedBy", issuedBy));
        }

        if (minVolume != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("minVolume", minVolume));
        }

        if (orderState != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("orderState", orderState));
        }

        if (price != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        }

        if (orderRange != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("orderRange", orderRange));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (volEntered != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("volEntered", volEntered));
        }

        if (volRemaining != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("volRemaining", volRemaining));
        }

        if (regionID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("regionID", regionID));
        }

        if (locationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationID", locationID));
        }

        if (isCorp != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("isCorp", isCorp));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMarketOrdersValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String orderID, String walletDivision, String bid, String charID, String duration, String escrow, String issued, String issuedBy, String minVolume, String orderState, String price, String orderRange, String typeID, String volEntered, String volRemaining, String regionID, String locationID, String isCorp, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getMarketOrders(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getMarketOrders(Async)");
        }
        

        com.squareup.okhttp.Call call = getMarketOrdersCall(accessKey, accessCred, at, contid, maxresults, reverse, orderID, walletDivision, bid, charID, duration, escrow, issued, issuedBy, minVolume, orderState, price, orderRange, typeID, volEntered, volRemaining, regionID, locationID, isCorp, callback);
        return call;

    }

    /**
     * Get market orders
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param orderID Market order ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param walletDivision Market order wallet division selector (optional, default to &quot;{ any: true }&quot;)
     * @param bid Market order bid indicator selector (optional, default to &quot;{ any: true }&quot;)
     * @param charID Market order character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param duration Market order duration selector (optional, default to &quot;{ any: true }&quot;)
     * @param escrow Market order escrow selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Market order issue date selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuedBy Market order issued by selector (optional, default to &quot;{ any: true }&quot;)
     * @param minVolume Market order min volume selector (optional, default to &quot;{ any: true }&quot;)
     * @param orderState Market order state selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Market order price selector (optional, default to &quot;{ any: true }&quot;)
     * @param orderRange Market order range selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Market order type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param volEntered Market order volume entered selector (optional, default to &quot;{ any: true }&quot;)
     * @param volRemaining Market order volume remaining selector (optional, default to &quot;{ any: true }&quot;)
     * @param regionID Market order region ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Market order location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isCorp Market order is corporation selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;MarketOrder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MarketOrder> getMarketOrders(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String orderID, String walletDivision, String bid, String charID, String duration, String escrow, String issued, String issuedBy, String minVolume, String orderState, String price, String orderRange, String typeID, String volEntered, String volRemaining, String regionID, String locationID, String isCorp) throws ApiException {
        ApiResponse<List<MarketOrder>> resp = getMarketOrdersWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, orderID, walletDivision, bid, charID, duration, escrow, issued, issuedBy, minVolume, orderState, price, orderRange, typeID, volEntered, volRemaining, regionID, locationID, isCorp);
        return resp.getData();
    }

    /**
     * Get market orders
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param orderID Market order ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param walletDivision Market order wallet division selector (optional, default to &quot;{ any: true }&quot;)
     * @param bid Market order bid indicator selector (optional, default to &quot;{ any: true }&quot;)
     * @param charID Market order character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param duration Market order duration selector (optional, default to &quot;{ any: true }&quot;)
     * @param escrow Market order escrow selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Market order issue date selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuedBy Market order issued by selector (optional, default to &quot;{ any: true }&quot;)
     * @param minVolume Market order min volume selector (optional, default to &quot;{ any: true }&quot;)
     * @param orderState Market order state selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Market order price selector (optional, default to &quot;{ any: true }&quot;)
     * @param orderRange Market order range selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Market order type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param volEntered Market order volume entered selector (optional, default to &quot;{ any: true }&quot;)
     * @param volRemaining Market order volume remaining selector (optional, default to &quot;{ any: true }&quot;)
     * @param regionID Market order region ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Market order location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isCorp Market order is corporation selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;MarketOrder&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MarketOrder>> getMarketOrdersWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String orderID, String walletDivision, String bid, String charID, String duration, String escrow, String issued, String issuedBy, String minVolume, String orderState, String price, String orderRange, String typeID, String volEntered, String volRemaining, String regionID, String locationID, String isCorp) throws ApiException {
        com.squareup.okhttp.Call call = getMarketOrdersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, orderID, walletDivision, bid, charID, duration, escrow, issued, issuedBy, minVolume, orderState, price, orderRange, typeID, volEntered, volRemaining, regionID, locationID, isCorp, null);
        Type localVarReturnType = new TypeToken<List<MarketOrder>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get market orders (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param orderID Market order ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param walletDivision Market order wallet division selector (optional, default to &quot;{ any: true }&quot;)
     * @param bid Market order bid indicator selector (optional, default to &quot;{ any: true }&quot;)
     * @param charID Market order character ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param duration Market order duration selector (optional, default to &quot;{ any: true }&quot;)
     * @param escrow Market order escrow selector (optional, default to &quot;{ any: true }&quot;)
     * @param issued Market order issue date selector (optional, default to &quot;{ any: true }&quot;)
     * @param issuedBy Market order issued by selector (optional, default to &quot;{ any: true }&quot;)
     * @param minVolume Market order min volume selector (optional, default to &quot;{ any: true }&quot;)
     * @param orderState Market order state selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Market order price selector (optional, default to &quot;{ any: true }&quot;)
     * @param orderRange Market order range selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Market order type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param volEntered Market order volume entered selector (optional, default to &quot;{ any: true }&quot;)
     * @param volRemaining Market order volume remaining selector (optional, default to &quot;{ any: true }&quot;)
     * @param regionID Market order region ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Market order location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isCorp Market order is corporation selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMarketOrdersAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String orderID, String walletDivision, String bid, String charID, String duration, String escrow, String issued, String issuedBy, String minVolume, String orderState, String price, String orderRange, String typeID, String volEntered, String volRemaining, String regionID, String locationID, String isCorp, final ApiCallback<List<MarketOrder>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getMarketOrdersValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, orderID, walletDivision, bid, charID, duration, escrow, issued, issuedBy, minVolume, orderState, price, orderRange, typeID, volEntered, volRemaining, regionID, locationID, isCorp, callback);
        Type localVarReturnType = new TypeToken<List<MarketOrder>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStandings
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param standingEntity Standing entity selector (optional, default to &quot;{ any: true }&quot;)
     * @param fromID Standing from ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param standing Standing value selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStandingsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String standingEntity, String fromID, String standing, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/standing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (standingEntity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("standingEntity", standingEntity));
        }

        if (fromID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("fromID", fromID));
        }

        if (standing != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("standing", standing));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStandingsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String standingEntity, String fromID, String standing, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getStandings(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getStandings(Async)");
        }
        

        com.squareup.okhttp.Call call = getStandingsCall(accessKey, accessCred, at, contid, maxresults, reverse, standingEntity, fromID, standing, callback);
        return call;

    }

    /**
     * Get standings)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param standingEntity Standing entity selector (optional, default to &quot;{ any: true }&quot;)
     * @param fromID Standing from ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param standing Standing value selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;Standing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Standing> getStandings(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String standingEntity, String fromID, String standing) throws ApiException {
        ApiResponse<List<Standing>> resp = getStandingsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, standingEntity, fromID, standing);
        return resp.getData();
    }

    /**
     * Get standings)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param standingEntity Standing entity selector (optional, default to &quot;{ any: true }&quot;)
     * @param fromID Standing from ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param standing Standing value selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;Standing&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Standing>> getStandingsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String standingEntity, String fromID, String standing) throws ApiException {
        com.squareup.okhttp.Call call = getStandingsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, standingEntity, fromID, standing, null);
        Type localVarReturnType = new TypeToken<List<Standing>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get standings) (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param standingEntity Standing entity selector (optional, default to &quot;{ any: true }&quot;)
     * @param fromID Standing from ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param standing Standing value selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStandingsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String standingEntity, String fromID, String standing, final ApiCallback<List<Standing>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getStandingsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, standingEntity, fromID, standing, callback);
        Type localVarReturnType = new TypeToken<List<Standing>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWalletTransactions
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Wallet division selector (optional, default to &quot;{ any: true }&quot;)
     * @param transactionID Transaction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param date Transaction date selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Transaction quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Transaction type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Transaction price selector (optional, default to &quot;{ any: true }&quot;)
     * @param clientID Transaction client ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Transaction location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isBuy Transaction isBuy selector (optional, default to &quot;{ any: true }&quot;)
     * @param isPersonal Transaction isPersonal selector (optional, default to &quot;{ any: true }&quot;)
     * @param journalTransactionID Journal transaction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWalletTransactionsCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String transactionID, String date, String quantity, String typeID, String price, String clientID, String locationID, String isBuy, String isPersonal, String journalTransactionID, final ApiCallback callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/common/wallet_transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("accessCred", accessCred));
        }

        if (at != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("at", at));
        }

        if (contid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("contid", contid));
        }

        if (maxresults != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("maxresults", maxresults));
        }

        if (reverse != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("reverse", reverse));
        }

        if (division != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("division", division));
        }

        if (transactionID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("transactionID", transactionID));
        }

        if (date != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("date", date));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("quantity", quantity));
        }

        if (typeID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("typeID", typeID));
        }

        if (price != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("price", price));
        }

        if (clientID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("clientID", clientID));
        }

        if (locationID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("locationID", locationID));
        }

        if (isBuy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("isBuy", isBuy));
        }

        if (isPersonal != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("isPersonal", isPersonal));
        }

        if (journalTransactionID != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("journalTransactionID", journalTransactionID));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, callback);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWalletTransactionsValidateBeforeCall(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String transactionID, String date, String quantity, String typeID, String price, String clientID, String locationID, String isBuy, String isPersonal, String journalTransactionID, final ApiCallback callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getWalletTransactions(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getWalletTransactions(Async)");
        }
        

        com.squareup.okhttp.Call call = getWalletTransactionsCall(accessKey, accessCred, at, contid, maxresults, reverse, division, transactionID, date, quantity, typeID, price, clientID, locationID, isBuy, isPersonal, journalTransactionID, callback);
        return call;

    }

    /**
     * Get wallet transactions
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Wallet division selector (optional, default to &quot;{ any: true }&quot;)
     * @param transactionID Transaction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param date Transaction date selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Transaction quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Transaction type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Transaction price selector (optional, default to &quot;{ any: true }&quot;)
     * @param clientID Transaction client ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Transaction location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isBuy Transaction isBuy selector (optional, default to &quot;{ any: true }&quot;)
     * @param isPersonal Transaction isPersonal selector (optional, default to &quot;{ any: true }&quot;)
     * @param journalTransactionID Journal transaction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return List&lt;WalletTransaction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<WalletTransaction> getWalletTransactions(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String transactionID, String date, String quantity, String typeID, String price, String clientID, String locationID, String isBuy, String isPersonal, String journalTransactionID) throws ApiException {
        ApiResponse<List<WalletTransaction>> resp = getWalletTransactionsWithHttpInfo(accessKey, accessCred, at, contid, maxresults, reverse, division, transactionID, date, quantity, typeID, price, clientID, locationID, isBuy, isPersonal, journalTransactionID);
        return resp.getData();
    }

    /**
     * Get wallet transactions
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Wallet division selector (optional, default to &quot;{ any: true }&quot;)
     * @param transactionID Transaction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param date Transaction date selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Transaction quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Transaction type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Transaction price selector (optional, default to &quot;{ any: true }&quot;)
     * @param clientID Transaction client ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Transaction location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isBuy Transaction isBuy selector (optional, default to &quot;{ any: true }&quot;)
     * @param isPersonal Transaction isPersonal selector (optional, default to &quot;{ any: true }&quot;)
     * @param journalTransactionID Journal transaction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @return ApiResponse&lt;List&lt;WalletTransaction&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<WalletTransaction>> getWalletTransactionsWithHttpInfo(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String transactionID, String date, String quantity, String typeID, String price, String clientID, String locationID, String isBuy, String isPersonal, String journalTransactionID) throws ApiException {
        com.squareup.okhttp.Call call = getWalletTransactionsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, division, transactionID, date, quantity, typeID, price, clientID, locationID, isBuy, isPersonal, journalTransactionID, null);
        Type localVarReturnType = new TypeToken<List<WalletTransaction>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get wallet transactions (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param at Model lifeline selector (defaults to current live data) (optional, default to &quot;{ values: [ \&quot;9223372036854775806\&quot; ] }&quot;)
     * @param contid Continuation ID for paged results (optional, default to -1l)
     * @param maxresults Maximum number of results to retrieve (optional, default to 1000)
     * @param reverse If true, page backwards (results less than contid) with results in descending order (by cid) (optional, default to false)
     * @param division Wallet division selector (optional, default to &quot;{ any: true }&quot;)
     * @param transactionID Transaction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param date Transaction date selector (optional, default to &quot;{ any: true }&quot;)
     * @param quantity Transaction quantity selector (optional, default to &quot;{ any: true }&quot;)
     * @param typeID Transaction type ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param price Transaction price selector (optional, default to &quot;{ any: true }&quot;)
     * @param clientID Transaction client ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param locationID Transaction location ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param isBuy Transaction isBuy selector (optional, default to &quot;{ any: true }&quot;)
     * @param isPersonal Transaction isPersonal selector (optional, default to &quot;{ any: true }&quot;)
     * @param journalTransactionID Journal transaction ID selector (optional, default to &quot;{ any: true }&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWalletTransactionsAsync(Integer accessKey, String accessCred, String at, Long contid, Integer maxresults, Boolean reverse, String division, String transactionID, String date, String quantity, String typeID, String price, String clientID, String locationID, String isBuy, String isPersonal, String journalTransactionID, final ApiCallback<List<WalletTransaction>> callback) throws ApiException {

        com.squareup.okhttp.Call call = getWalletTransactionsValidateBeforeCall(accessKey, accessCred, at, contid, maxresults, reverse, division, transactionID, date, quantity, typeID, price, clientID, locationID, isBuy, isPersonal, journalTransactionID, callback);
        Type localVarReturnType = new TypeToken<List<WalletTransaction>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
