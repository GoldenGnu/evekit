/*
 * EveKit Model API Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package enterprises.orbital.evekit.client.api;

import enterprises.orbital.evekit.client.ApiCallback;
import enterprises.orbital.evekit.client.ApiClient;
import enterprises.orbital.evekit.client.ApiException;
import enterprises.orbital.evekit.client.ApiResponse;
import enterprises.orbital.evekit.client.Configuration;
import enterprises.orbital.evekit.client.Pair;
import enterprises.orbital.evekit.client.ProgressRequestBody;
import enterprises.orbital.evekit.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import enterprises.orbital.evekit.client.model.KeyInfo;
import enterprises.orbital.evekit.client.model.MaskList;
import enterprises.orbital.evekit.client.model.ServiceError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccessKeyApi {
    private ApiClient localVarApiClient;

    public AccessKeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccessKeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getKeyInfo
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getKeyInfoCall(Integer accessKey, String accessCred, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/accesskey/key_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessKey", accessKey));
        }

        if (accessCred != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accessCred", accessCred));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeyInfoValidateBeforeCall(Integer accessKey, String accessCred, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'accessKey' is set
        if (accessKey == null) {
            throw new ApiException("Missing the required parameter 'accessKey' when calling getKeyInfo(Async)");
        }
        
        // verify the required parameter 'accessCred' is set
        if (accessCred == null) {
            throw new ApiException("Missing the required parameter 'accessCred' when calling getKeyInfo(Async)");
        }
        

        okhttp3.Call localVarCall = getKeyInfoCall(accessKey, accessCred, _callback);
        return localVarCall;

    }

    /**
     * Get information about an access key
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @return KeyInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public KeyInfo getKeyInfo(Integer accessKey, String accessCred) throws ApiException {
        ApiResponse<KeyInfo> localVarResp = getKeyInfoWithHttpInfo(accessKey, accessCred);
        return localVarResp.getData();
    }

    /**
     * Get information about an access key
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @return ApiResponse&lt;KeyInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<KeyInfo> getKeyInfoWithHttpInfo(Integer accessKey, String accessCred) throws ApiException {
        okhttp3.Call localVarCall = getKeyInfoValidateBeforeCall(accessKey, accessCred, null);
        Type localVarReturnType = new TypeToken<KeyInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information about an access key (asynchronously)
     * 
     * @param accessKey Model access key (required)
     * @param accessCred Model access credential (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getKeyInfoAsync(Integer accessKey, String accessCred, final ApiCallback<KeyInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeyInfoValidateBeforeCall(accessKey, accessCred, _callback);
        Type localVarReturnType = new TypeToken<KeyInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMaskList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getMaskListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/ws/v1/accesskey/mask_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMaskListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getMaskListCall(_callback);
        return localVarCall;

    }

    /**
     * Get access key mask list constants
     * 
     * @return MaskList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MaskList getMaskList() throws ApiException {
        ApiResponse<MaskList> localVarResp = getMaskListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get access key mask list constants
     * 
     * @return ApiResponse&lt;MaskList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MaskList> getMaskListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getMaskListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MaskList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get access key mask list constants (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getMaskListAsync(final ApiCallback<MaskList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMaskListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MaskList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
