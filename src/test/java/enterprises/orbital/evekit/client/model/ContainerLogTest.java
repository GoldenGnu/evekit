/*
 * EveKit Model API Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package enterprises.orbital.evekit.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for ContainerLog
 */
public class ContainerLogTest {
    private final ContainerLog model = new ContainerLog();

    /**
     * Model tests for ContainerLog
     */
    @Test
    public void testContainerLog() {
        // TODO: test ContainerLog
    }

    /**
     * Test the property 'cid'
     */
    @Test
    public void cidTest() {
        // TODO: test cid
    }

    /**
     * Test the property 'eveKitVersion'
     */
    @Test
    public void eveKitVersionTest() {
        // TODO: test eveKitVersion
    }

    /**
     * Test the property 'lifeStart'
     */
    @Test
    public void lifeStartTest() {
        // TODO: test lifeStart
    }

    /**
     * Test the property 'lifeEnd'
     */
    @Test
    public void lifeEndTest() {
        // TODO: test lifeEnd
    }

    /**
     * Test the property 'logTime'
     */
    @Test
    public void logTimeTest() {
        // TODO: test logTime
    }

    /**
     * Test the property 'action'
     */
    @Test
    public void actionTest() {
        // TODO: test action
    }

    /**
     * Test the property 'characterID'
     */
    @Test
    public void characterIDTest() {
        // TODO: test characterID
    }

    /**
     * Test the property 'locationFlag'
     */
    @Test
    public void locationFlagTest() {
        // TODO: test locationFlag
    }

    /**
     * Test the property 'containerID'
     */
    @Test
    public void containerIDTest() {
        // TODO: test containerID
    }

    /**
     * Test the property 'containerTypeID'
     */
    @Test
    public void containerTypeIDTest() {
        // TODO: test containerTypeID
    }

    /**
     * Test the property 'locationID'
     */
    @Test
    public void locationIDTest() {
        // TODO: test locationID
    }

    /**
     * Test the property 'newConfiguration'
     */
    @Test
    public void newConfigurationTest() {
        // TODO: test newConfiguration
    }

    /**
     * Test the property 'oldConfiguration'
     */
    @Test
    public void oldConfigurationTest() {
        // TODO: test oldConfiguration
    }

    /**
     * Test the property 'passwordType'
     */
    @Test
    public void passwordTypeTest() {
        // TODO: test passwordType
    }

    /**
     * Test the property 'quantity'
     */
    @Test
    public void quantityTest() {
        // TODO: test quantity
    }

    /**
     * Test the property 'typeID'
     */
    @Test
    public void typeIDTest() {
        // TODO: test typeID
    }

    /**
     * Test the property 'lifeStartDate'
     */
    @Test
    public void lifeStartDateTest() {
        // TODO: test lifeStartDate
    }

    /**
     * Test the property 'lifeEndDate'
     */
    @Test
    public void lifeEndDateTest() {
        // TODO: test lifeEndDate
    }

    /**
     * Test the property 'logTimeDate'
     */
    @Test
    public void logTimeDateTest() {
        // TODO: test logTimeDate
    }

}
