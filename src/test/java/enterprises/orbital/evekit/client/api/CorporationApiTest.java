/*
 * EveKit Model API Server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package enterprises.orbital.evekit.client.api;

import enterprises.orbital.evekit.client.ApiException;
import enterprises.orbital.evekit.client.model.ContainerLog;
import enterprises.orbital.evekit.client.model.CorporationMedal;
import enterprises.orbital.evekit.client.model.CorporationMemberMedal;
import enterprises.orbital.evekit.client.model.CorporationSheet;
import enterprises.orbital.evekit.client.model.CorporationTitle;
import enterprises.orbital.evekit.client.model.CustomsOffice;
import enterprises.orbital.evekit.client.model.Division;
import enterprises.orbital.evekit.client.model.Facility;
import enterprises.orbital.evekit.client.model.Fuel;
import enterprises.orbital.evekit.client.model.MemberSecurity;
import enterprises.orbital.evekit.client.model.MemberSecurityLog;
import enterprises.orbital.evekit.client.model.MemberTracking;
import enterprises.orbital.evekit.client.model.Outpost;
import enterprises.orbital.evekit.client.model.OutpostServiceDetail;
import enterprises.orbital.evekit.client.model.Role;
import enterprises.orbital.evekit.client.model.SecurityRole;
import enterprises.orbital.evekit.client.model.SecurityTitle;
import enterprises.orbital.evekit.client.model.ServiceError;
import enterprises.orbital.evekit.client.model.Shareholder;
import enterprises.orbital.evekit.client.model.Starbase;
import enterprises.orbital.evekit.client.model.StarbaseDetail;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CorporationApi
 */
@Ignore
public class CorporationApiTest {

    private final CorporationApi api = new CorporationApi();

    
    /**
     * Get container log records
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContainerLogsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String logTime = null;
        String action = null;
        String actorID = null;
        String actorName = null;
        String flag = null;
        String itemID = null;
        String itemTypeID = null;
        String locationID = null;
        String newConfiguration = null;
        String oldConfiguration = null;
        String passwordType = null;
        String quantity = null;
        String typeID = null;
        List<ContainerLog> response = api.getContainerLogs(accessKey, accessCred, at, contid, maxresults, reverse, logTime, action, actorID, actorName, flag, itemID, itemTypeID, locationID, newConfiguration, oldConfiguration, passwordType, quantity, typeID);

        // TODO: test validations
    }
    
    /**
     * Get corporation medals
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCorporationMedalsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String medalID = null;
        String description = null;
        String title = null;
        String created = null;
        String creatorID = null;
        List<CorporationMedal> response = api.getCorporationMedals(accessKey, accessCred, at, contid, maxresults, reverse, medalID, description, title, created, creatorID);

        // TODO: test validations
    }
    
    /**
     * Get corporation sheet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCorporationSheetTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String allianceID = null;
        String allianceName = null;
        String ceoID = null;
        String ceoName = null;
        String corporationID = null;
        String corporationName = null;
        String description = null;
        String logoColor1 = null;
        String logoColor2 = null;
        String logoColor3 = null;
        String logoGraphicID = null;
        String logoShape1 = null;
        String logoShape2 = null;
        String logoShape3 = null;
        String memberCount = null;
        String memberLimit = null;
        String shares = null;
        String stationID = null;
        String stationName = null;
        String taxRate = null;
        String ticker = null;
        String url = null;
        List<CorporationSheet> response = api.getCorporationSheet(accessKey, accessCred, at, contid, maxresults, reverse, allianceID, allianceName, ceoID, ceoName, corporationID, corporationName, description, logoColor1, logoColor2, logoColor3, logoGraphicID, logoShape1, logoShape2, logoShape3, memberCount, memberLimit, shares, stationID, stationName, taxRate, ticker, url);

        // TODO: test validations
    }
    
    /**
     * Get corporation titles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCorporationTitlesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String titleID = null;
        String titleName = null;
        String grantableRoles = null;
        String grantableRolesAtBase = null;
        String grantableRolesAtHQ = null;
        String grantableRolesAtOther = null;
        String roles = null;
        String rolesAtBase = null;
        String rolesAtHQ = null;
        String rolesAtOther = null;
        List<CorporationTitle> response = api.getCorporationTitles(accessKey, accessCred, at, contid, maxresults, reverse, titleID, titleName, grantableRoles, grantableRolesAtBase, grantableRolesAtHQ, grantableRolesAtOther, roles, rolesAtBase, rolesAtHQ, rolesAtOther);

        // TODO: test validations
    }
    
    /**
     * Get corporation customs offices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomsOfficesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String itemID = null;
        String solarSystemID = null;
        String solarSystemName = null;
        String reinforceHour = null;
        String allowAlliance = null;
        String allowStandings = null;
        String standingLevel = null;
        String taxRateAlliance = null;
        String taxRateCorp = null;
        String taxRateStandingHigh = null;
        String taxRateStandingGood = null;
        String taxRateStandingNeutral = null;
        String taxRateStandingBad = null;
        String taxRateStandingHorrible = null;
        List<CustomsOffice> response = api.getCustomsOffices(accessKey, accessCred, at, contid, maxresults, reverse, itemID, solarSystemID, solarSystemName, reinforceHour, allowAlliance, allowStandings, standingLevel, taxRateAlliance, taxRateCorp, taxRateStandingHigh, taxRateStandingGood, taxRateStandingNeutral, taxRateStandingBad, taxRateStandingHorrible);

        // TODO: test validations
    }
    
    /**
     * Get corporation divisions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDivisionsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String wallet = null;
        String accountKey = null;
        String description = null;
        List<Division> response = api.getDivisions(accessKey, accessCred, at, contid, maxresults, reverse, wallet, accountKey, description);

        // TODO: test validations
    }
    
    /**
     * Get corporation facilities
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFacilitiesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String facilityID = null;
        String typeID = null;
        String typeName = null;
        String solarSystemID = null;
        String solarSystemName = null;
        String regionID = null;
        String regionName = null;
        String starbaseModifier = null;
        String tax = null;
        List<Facility> response = api.getFacilities(accessKey, accessCred, at, contid, maxresults, reverse, facilityID, typeID, typeName, solarSystemID, solarSystemName, regionID, regionName, starbaseModifier, tax);

        // TODO: test validations
    }
    
    /**
     * Get corporation starbase fuel levels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFuelTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String itemID = null;
        String typeID = null;
        String quantity = null;
        List<Fuel> response = api.getFuel(accessKey, accessCred, at, contid, maxresults, reverse, itemID, typeID, quantity);

        // TODO: test validations
    }
    
    /**
     * Get medals awarded to corporation members
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemberMedalsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String medalID = null;
        String characterID = null;
        String issued = null;
        String issuerID = null;
        String reason = null;
        String status = null;
        List<CorporationMemberMedal> response = api.getMemberMedals(accessKey, accessCred, at, contid, maxresults, reverse, medalID, characterID, issued, issuerID, reason, status);

        // TODO: test validations
    }
    
    /**
     * Get corporation member security settings
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemberSecurityTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String characterID = null;
        String name = null;
        String grantableRoles = null;
        String grantableRolesAtBase = null;
        String grantableRolesAtHQ = null;
        String grantableRolesAtOther = null;
        String roles = null;
        String rolesAtBase = null;
        String rolesAtHQ = null;
        String rolesAtOther = null;
        String titles = null;
        List<MemberSecurity> response = api.getMemberSecurity(accessKey, accessCred, at, contid, maxresults, reverse, characterID, name, grantableRoles, grantableRolesAtBase, grantableRolesAtHQ, grantableRolesAtOther, roles, rolesAtBase, rolesAtHQ, rolesAtOther, titles);

        // TODO: test validations
    }
    
    /**
     * Get corporation member security log entries
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemberSecurityLogTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String changeTime = null;
        String changedCharacterID = null;
        String changedCharacterName = null;
        String issuerID = null;
        String issuerName = null;
        String roleLocationType = null;
        String oldRoles = null;
        String newRoles = null;
        List<MemberSecurityLog> response = api.getMemberSecurityLog(accessKey, accessCred, at, contid, maxresults, reverse, changeTime, changedCharacterID, changedCharacterName, issuerID, issuerName, roleLocationType, oldRoles, newRoles);

        // TODO: test validations
    }
    
    /**
     * Get member tracking information
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMemberTrackingTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String characterID = null;
        String base = null;
        String baseID = null;
        String grantableRoles = null;
        String location = null;
        String locationID = null;
        String logoffDateTime = null;
        String logonDateTime = null;
        String name = null;
        String roles = null;
        String shipType = null;
        String shipTypeID = null;
        String startDateTime = null;
        String title = null;
        List<MemberTracking> response = api.getMemberTracking(accessKey, accessCred, at, contid, maxresults, reverse, characterID, base, baseID, grantableRoles, location, locationID, logoffDateTime, logonDateTime, name, roles, shipType, shipTypeID, startDateTime, title);

        // TODO: test validations
    }
    
    /**
     * Get corporation outpost service detail
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOutpostServiceDetailsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String stationID = null;
        String serviceName = null;
        String ownerID = null;
        String minStanding = null;
        String surchargePerBadStanding = null;
        String discountPerGoodStanding = null;
        List<OutpostServiceDetail> response = api.getOutpostServiceDetails(accessKey, accessCred, at, contid, maxresults, reverse, stationID, serviceName, ownerID, minStanding, surchargePerBadStanding, discountPerGoodStanding);

        // TODO: test validations
    }
    
    /**
     * Get corporation outposts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOutpostsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String stationID = null;
        String ownerID = null;
        String stationName = null;
        String solarSystemID = null;
        String dockingCostPerShipVolume = null;
        String officeRentalCost = null;
        String stationTypeID = null;
        String reprocessingEfficiency = null;
        String reprocessingStationTake = null;
        String standingOwnerID = null;
        String x = null;
        String y = null;
        String z = null;
        List<Outpost> response = api.getOutposts(accessKey, accessCred, at, contid, maxresults, reverse, stationID, ownerID, stationName, solarSystemID, dockingCostPerShipVolume, officeRentalCost, stationTypeID, reprocessingEfficiency, reprocessingStationTake, standingOwnerID, x, y, z);

        // TODO: test validations
    }
    
    /**
     * Get corporation title roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRolesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String roleID = null;
        String roleDescription = null;
        String roleName = null;
        List<Role> response = api.getRoles(accessKey, accessCred, at, contid, maxresults, reverse, roleID, roleDescription, roleName);

        // TODO: test validations
    }
    
    /**
     * Get corporation security roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityRolesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String roleID = null;
        String roleName = null;
        List<SecurityRole> response = api.getSecurityRoles(accessKey, accessCred, at, contid, maxresults, reverse, roleID, roleName);

        // TODO: test validations
    }
    
    /**
     * Get corporation security titles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurityTitlesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String titleID = null;
        String titleName = null;
        List<SecurityTitle> response = api.getSecurityTitles(accessKey, accessCred, at, contid, maxresults, reverse, titleID, titleName);

        // TODO: test validations
    }
    
    /**
     * Get corporation shareholders
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShareholdersTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String shareholderID = null;
        String isCorporation = null;
        String shareholderCorporationID = null;
        String shareholderCorporationName = null;
        String shareholderName = null;
        String shares = null;
        List<Shareholder> response = api.getShareholders(accessKey, accessCred, at, contid, maxresults, reverse, shareholderID, isCorporation, shareholderCorporationID, shareholderCorporationName, shareholderName, shares);

        // TODO: test validations
    }
    
    /**
     * Get corporation starbase details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStarbaseDetailsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String itemID = null;
        String state = null;
        String stateTimestamp = null;
        String onlineTimestamp = null;
        String usageFlags = null;
        String deployFlags = null;
        String allowAllianceMembers = null;
        String allowCorporationMembers = null;
        String useStandingsFrom = null;
        String onAggressionEnabled = null;
        String onAggressionStanding = null;
        String onCorporationWarEnabled = null;
        String onCorporationWarStanding = null;
        String onStandingDropEnabled = null;
        String onStandingDropStanding = null;
        String onStatusDropEnabled = null;
        String onStatusDropStanding = null;
        List<StarbaseDetail> response = api.getStarbaseDetails(accessKey, accessCred, at, contid, maxresults, reverse, itemID, state, stateTimestamp, onlineTimestamp, usageFlags, deployFlags, allowAllianceMembers, allowCorporationMembers, useStandingsFrom, onAggressionEnabled, onAggressionStanding, onCorporationWarEnabled, onCorporationWarStanding, onStandingDropEnabled, onStandingDropStanding, onStatusDropEnabled, onStatusDropStanding);

        // TODO: test validations
    }
    
    /**
     * Get corporation starbases
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStarbasesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String itemID = null;
        String locationID = null;
        String moonID = null;
        String onlineTimestamp = null;
        String state = null;
        String stateTimestamp = null;
        String typeID = null;
        String standingOwnerID = null;
        List<Starbase> response = api.getStarbases(accessKey, accessCred, at, contid, maxresults, reverse, itemID, locationID, moonID, onlineTimestamp, state, stateTimestamp, typeID, standingOwnerID);

        // TODO: test validations
    }
    
}
