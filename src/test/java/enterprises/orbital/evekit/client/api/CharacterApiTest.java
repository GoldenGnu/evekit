/**
 * EveKit Model API Server
 * 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package enterprises.orbital.evekit.client.api;

import enterprises.orbital.evekit.client.invoker.ApiException;
import enterprises.orbital.evekit.client.model.AccountStatus;
import enterprises.orbital.evekit.client.model.ServiceError;
import enterprises.orbital.evekit.client.model.CharacterSheetBalance;
import enterprises.orbital.evekit.client.model.CalendarEventAttendee;
import enterprises.orbital.evekit.client.model.ChatChannelMember;
import enterprises.orbital.evekit.client.model.ChatChannel;
import enterprises.orbital.evekit.client.model.CharacterSheet;
import enterprises.orbital.evekit.client.model.CharacterSheetClone;
import enterprises.orbital.evekit.client.model.CharacterContactNotification;
import enterprises.orbital.evekit.client.model.Implant;
import enterprises.orbital.evekit.client.model.JumpCloneImplant;
import enterprises.orbital.evekit.client.model.JumpClone;
import enterprises.orbital.evekit.client.model.CharacterSheetJump;
import enterprises.orbital.evekit.client.model.CharacterMailMessageBody;
import enterprises.orbital.evekit.client.model.CharacterMailMessage;
import enterprises.orbital.evekit.client.model.MailingList;
import enterprises.orbital.evekit.client.model.CharacterMedal;
import enterprises.orbital.evekit.client.model.CharacterNotificationBody;
import enterprises.orbital.evekit.client.model.CharacterNotification;
import enterprises.orbital.evekit.client.model.PlanetaryColony;
import enterprises.orbital.evekit.client.model.PlanetaryLink;
import enterprises.orbital.evekit.client.model.PlanetaryPin;
import enterprises.orbital.evekit.client.model.PlanetaryRoute;
import enterprises.orbital.evekit.client.model.ResearchAgent;
import enterprises.orbital.evekit.client.model.CharacterRole;
import enterprises.orbital.evekit.client.model.CharacterSkill;
import enterprises.orbital.evekit.client.model.SkillInQueue;
import enterprises.orbital.evekit.client.model.CharacterSkillInTraining;
import enterprises.orbital.evekit.client.model.CharacterTitle;
import enterprises.orbital.evekit.client.model.UpcomingCalendarEvent;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CharacterApi
 */
public class CharacterApiTest {

    private final CharacterApi api = new CharacterApi();

    
    /**
     * Get account status(es)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountStatusTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String paidUntil = null;
        String createDate = null;
        String logonCount = null;
        String logonMinutes = null;
        String multiCharacterTraining = null;
        // List<AccountStatus> response = api.getAccountStatus(accessKey, accessCred, at, contid, maxresults, reverse, paidUntil, createDate, logonCount, logonMinutes, multiCharacterTraining);

        // TODO: test validations
    }
    
    /**
     * Get character sheet balance
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalancesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String balance = null;
        // List<CharacterSheetBalance> response = api.getBalances(accessKey, accessCred, at, contid, maxresults, reverse, balance);

        // TODO: test validations
    }
    
    /**
     * Get calendar event attendees
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCalendarEventAttendeesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String eventID = null;
        String characterID = null;
        String characterName = null;
        String response = null;
        // List<CalendarEventAttendee> response = api.getCalendarEventAttendees(accessKey, accessCred, at, contid, maxresults, reverse, eventID, characterID, characterName, response);

        // TODO: test validations
    }
    
    /**
     * Get chat channel members
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelMembersTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String channelID = null;
        String category = null;
        String accessorID = null;
        String accessorName = null;
        String untilWhen = null;
        String reason = null;
        // List<ChatChannelMember> response = api.getChannelMembers(accessKey, accessCred, at, contid, maxresults, reverse, channelID, category, accessorID, accessorName, untilWhen, reason);

        // TODO: test validations
    }
    
    /**
     * Get character chat channels
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChannelsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String channelID = null;
        String ownerID = null;
        String ownerName = null;
        String displayName = null;
        String comparisonKey = null;
        String hasPassword = null;
        String motd = null;
        // List<ChatChannel> response = api.getChannels(accessKey, accessCred, at, contid, maxresults, reverse, channelID, ownerID, ownerName, displayName, comparisonKey, hasPassword, motd);

        // TODO: test validations
    }
    
    /**
     * Get character sheet
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCharacterSheetsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String characterID = null;
        String name = null;
        String corporationID = null;
        String corporationName = null;
        String race = null;
        String doB = null;
        String bloodlineID = null;
        String bloodline = null;
        String ancestryID = null;
        String ancestry = null;
        String gender = null;
        String allianceName = null;
        String allianceID = null;
        String factionName = null;
        String factionID = null;
        String intelligence = null;
        String memory = null;
        String charisma = null;
        String perception = null;
        String willpower = null;
        String homeStationID = null;
        String lastRespecDate = null;
        String lastTimedRespec = null;
        String freeRespecs = null;
        String freeSkillPoints = null;
        String remoteStationDate = null;
        // List<CharacterSheet> response = api.getCharacterSheets(accessKey, accessCred, at, contid, maxresults, reverse, characterID, name, corporationID, corporationName, race, doB, bloodlineID, bloodline, ancestryID, ancestry, gender, allianceName, allianceID, factionName, factionID, intelligence, memory, charisma, perception, willpower, homeStationID, lastRespecDate, lastTimedRespec, freeRespecs, freeSkillPoints, remoteStationDate);

        // TODO: test validations
    }
    
    /**
     * Get character clone jump timers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCloneJumpTimersTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String cloneJumpDate = null;
        // List<CharacterSheetClone> response = api.getCloneJumpTimers(accessKey, accessCred, at, contid, maxresults, reverse, cloneJumpDate);

        // TODO: test validations
    }
    
    /**
     * Get character contact notifications
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactNotificationsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String notificationID = null;
        String senderID = null;
        String senderName = null;
        String sentDate = null;
        String messageData = null;
        // List<CharacterContactNotification> response = api.getContactNotifications(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, senderID, senderName, sentDate, messageData);

        // TODO: test validations
    }
    
    /**
     * Get character implants
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getImplantsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String typeID = null;
        String typeName = null;
        // List<Implant> response = api.getImplants(accessKey, accessCred, at, contid, maxresults, reverse, typeID, typeName);

        // TODO: test validations
    }
    
    /**
     * Get character jump clone implants
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJumpCloneImplantsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String jumpCloneID = null;
        String typeID = null;
        String typeName = null;
        // List<JumpCloneImplant> response = api.getJumpCloneImplants(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, typeID, typeName);

        // TODO: test validations
    }
    
    /**
     * Get character jump clones
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJumpClonesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String jumpCloneID = null;
        String typeID = null;
        String locationID = null;
        String cloneName = null;
        // List<JumpClone> response = api.getJumpClones(accessKey, accessCred, at, contid, maxresults, reverse, jumpCloneID, typeID, locationID, cloneName);

        // TODO: test validations
    }
    
    /**
     * Get character jump timers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getJumpTimersTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String jumpActivation = null;
        String jumpFatigue = null;
        String jumpLastUpdate = null;
        // List<CharacterSheetJump> response = api.getJumpTimers(accessKey, accessCred, at, contid, maxresults, reverse, jumpActivation, jumpFatigue, jumpLastUpdate);

        // TODO: test validations
    }
    
    /**
     * Get character mail message bodies
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMailMessageBodiesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String messageID = null;
        String retrieved = null;
        String body = null;
        // List<CharacterMailMessageBody> response = api.getMailMessageBodies(accessKey, accessCred, at, contid, maxresults, reverse, messageID, retrieved, body);

        // TODO: test validations
    }
    
    /**
     * Get character mail messages (not bodies)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMailMessagesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String messageID = null;
        String senderID = null;
        String senderName = null;
        String toCharacterID = null;
        String sentDate = null;
        String title = null;
        String toCorpOrAllianceID = null;
        String toListID = null;
        String msgRead = null;
        String senderTypeID = null;
        // List<CharacterMailMessage> response = api.getMailMessages(accessKey, accessCred, at, contid, maxresults, reverse, messageID, senderID, senderName, toCharacterID, sentDate, title, toCorpOrAllianceID, toListID, msgRead, senderTypeID);

        // TODO: test validations
    }
    
    /**
     * Get character mailing lists
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMailingListsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String displayName = null;
        String listID = null;
        // List<MailingList> response = api.getMailingLists(accessKey, accessCred, at, contid, maxresults, reverse, displayName, listID);

        // TODO: test validations
    }
    
    /**
     * Get character medals
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMedalsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String description = null;
        String medalID = null;
        String title = null;
        String corporationID = null;
        String issued = null;
        String issuerID = null;
        String reason = null;
        String status = null;
        // List<CharacterMedal> response = api.getMedals(accessKey, accessCred, at, contid, maxresults, reverse, description, medalID, title, corporationID, issued, issuerID, reason, status);

        // TODO: test validations
    }
    
    /**
     * Get character notification bodies
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationBodiesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String notificationID = null;
        String retrieved = null;
        String text = null;
        String missing = null;
        // List<CharacterNotificationBody> response = api.getNotificationBodies(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, retrieved, text, missing);

        // TODO: test validations
    }
    
    /**
     * Get character notifications (not bodies)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNotificationsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String notificationID = null;
        String typeID = null;
        String senderID = null;
        String sentDate = null;
        String msgRead = null;
        // List<CharacterNotification> response = api.getNotifications(accessKey, accessCred, at, contid, maxresults, reverse, notificationID, typeID, senderID, sentDate, msgRead);

        // TODO: test validations
    }
    
    /**
     * Get planetary colonies
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlanetaryColoniesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String planetID = null;
        String solarSystemID = null;
        String solarSystemName = null;
        String planetName = null;
        String planetTypeID = null;
        String planetTypeName = null;
        String ownerID = null;
        String ownerName = null;
        String lastUpdate = null;
        String upgradeLevel = null;
        String numberOfPins = null;
        // List<PlanetaryColony> response = api.getPlanetaryColonies(accessKey, accessCred, at, contid, maxresults, reverse, planetID, solarSystemID, solarSystemName, planetName, planetTypeID, planetTypeName, ownerID, ownerName, lastUpdate, upgradeLevel, numberOfPins);

        // TODO: test validations
    }
    
    /**
     * Get planetary links
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlanetaryLinksTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String planetID = null;
        String sourcePinID = null;
        String destinationPinID = null;
        String linkLevel = null;
        // List<PlanetaryLink> response = api.getPlanetaryLinks(accessKey, accessCred, at, contid, maxresults, reverse, planetID, sourcePinID, destinationPinID, linkLevel);

        // TODO: test validations
    }
    
    /**
     * Get planetary pins
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlanetaryPinsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String planetID = null;
        String pinID = null;
        String typeID = null;
        String typeName = null;
        String schematicID = null;
        String lastLaunchTime = null;
        String cycleTime = null;
        String quantityPerCycle = null;
        String installTime = null;
        String expiryTime = null;
        String contentTypeID = null;
        String contentTypeName = null;
        String contentQuantity = null;
        String longitude = null;
        String latitude = null;
        // List<PlanetaryPin> response = api.getPlanetaryPins(accessKey, accessCred, at, contid, maxresults, reverse, planetID, pinID, typeID, typeName, schematicID, lastLaunchTime, cycleTime, quantityPerCycle, installTime, expiryTime, contentTypeID, contentTypeName, contentQuantity, longitude, latitude);

        // TODO: test validations
    }
    
    /**
     * Get planetary routes
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlanetaryRoutesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String planetID = null;
        String routeID = null;
        String sourcePinID = null;
        String destinationPinID = null;
        String contentTypeID = null;
        String contentTypeName = null;
        String quantity = null;
        String waypoint1 = null;
        String waypoint2 = null;
        String waypoint3 = null;
        String waypoint4 = null;
        String waypoint5 = null;
        // List<PlanetaryRoute> response = api.getPlanetaryRoutes(accessKey, accessCred, at, contid, maxresults, reverse, planetID, routeID, sourcePinID, destinationPinID, contentTypeID, contentTypeName, quantity, waypoint1, waypoint2, waypoint3, waypoint4, waypoint5);

        // TODO: test validations
    }
    
    /**
     * Get character research agents
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getResearchAgentsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String agentID = null;
        String currentPoints = null;
        String pointsPerDay = null;
        String remainderPoints = null;
        String researchStartDate = null;
        String skillTypeID = null;
        // List<ResearchAgent> response = api.getResearchAgents(accessKey, accessCred, at, contid, maxresults, reverse, agentID, currentPoints, pointsPerDay, remainderPoints, researchStartDate, skillTypeID);

        // TODO: test validations
    }
    
    /**
     * Get character roles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRolesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String roleCategory = null;
        String roleID = null;
        String roleName = null;
        // List<CharacterRole> response = api.getRoles(accessKey, accessCred, at, contid, maxresults, reverse, roleCategory, roleID, roleName);

        // TODO: test validations
    }
    
    /**
     * Get character skills
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSkillsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String typeID = null;
        String level = null;
        String skillpoints = null;
        String published = null;
        // List<CharacterSkill> response = api.getSkills(accessKey, accessCred, at, contid, maxresults, reverse, typeID, level, skillpoints, published);

        // TODO: test validations
    }
    
    /**
     * Get character skill queue
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSkillsInQueueTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String endSP = null;
        String endTime = null;
        String level = null;
        String queuePosition = null;
        String startSP = null;
        String startTime = null;
        String typeID = null;
        // List<SkillInQueue> response = api.getSkillsInQueue(accessKey, accessCred, at, contid, maxresults, reverse, endSP, endTime, level, queuePosition, startSP, startTime, typeID);

        // TODO: test validations
    }
    
    /**
     * Get character skill in training
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSkillsInTrainingTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String skillInTraining = null;
        String currentTrainingQueueTime = null;
        String trainingStartTime = null;
        String trainingEndTime = null;
        String trainingStartSP = null;
        String trainingDestinationSP = null;
        String trainingToLevel = null;
        String skillTypeID = null;
        // List<CharacterSkillInTraining> response = api.getSkillsInTraining(accessKey, accessCred, at, contid, maxresults, reverse, skillInTraining, currentTrainingQueueTime, trainingStartTime, trainingEndTime, trainingStartSP, trainingDestinationSP, trainingToLevel, skillTypeID);

        // TODO: test validations
    }
    
    /**
     * Get character titles
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTitlesTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String titleID = null;
        String titleName = null;
        // List<CharacterTitle> response = api.getTitles(accessKey, accessCred, at, contid, maxresults, reverse, titleID, titleName);

        // TODO: test validations
    }
    
    /**
     * Get upcoming calendar events
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUpcomingCalendarEventsTest() throws ApiException {
        Integer accessKey = null;
        String accessCred = null;
        String at = null;
        Long contid = null;
        Integer maxresults = null;
        Boolean reverse = null;
        String duration = null;
        String eventDate = null;
        String eventID = null;
        String eventText = null;
        String eventTitle = null;
        String ownerID = null;
        String ownerName = null;
        String response = null;
        String important = null;
        String ownerTypeID = null;
        // List<UpcomingCalendarEvent> response = api.getUpcomingCalendarEvents(accessKey, accessCred, at, contid, maxresults, reverse, duration, eventDate, eventID, eventText, eventTitle, ownerID, ownerName, response, important, ownerTypeID);

        // TODO: test validations
    }
    
}
